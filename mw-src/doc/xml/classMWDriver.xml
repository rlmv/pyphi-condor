<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classMWDriver" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>MWDriver</compoundname>
    <includes refid="MWDriver_8h" local="no">MWDriver.h</includes>
      <sectiondef kind="user-defined">
      <header>A. Pure Virtual Methods</header>
      <description><para>These are the methods from the <ref refid="classMWDriver" kindref="compound">MWDriver</ref> class that a user { must} reimplement in order to have to create an application. </para></description>
      <memberdef kind="function" id="classMWDriver_1acf0edc86b06b46968114c8bb770791b2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>MWReturn</type>
        <definition>virtual MWReturn MWDriver::get_userinfo</definition>
        <argsstring>(int argc, char *argv[])=0</argsstring>
        <name>get_userinfo</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is called to read in all information specific to a user&apos;s application and do any initialization on this information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="208" column="1"/>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a618bdbf6e481a903455e068ba37ba0fa" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>MWReturn</type>
        <definition>virtual MWReturn MWDriver::setup_initial_tasks</definition>
        <argsstring>(int *n, MWTask ***task)=0</argsstring>
        <name>setup_initial_tasks</name>
        <param>
          <type>int *</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> ***</type>
          <declname>task</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function must return a number n &gt; 0 of pointers to Tasks to &quot;jump start&quot; the application.</para><para>The MWTasks pointed to should be of the task type derived for your application </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="216" column="1"/>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a920118e3f49ab81db5047d9ecdbcea2b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>MWReturn</type>
        <definition>virtual MWReturn MWDriver::act_on_completed_task</definition>
        <argsstring>(MWTask *)=0</argsstring>
        <name>act_on_completed_task</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function performs actions that happen once the Driver receives notification of a completed task. You will need to cast the <ref refid="classMWTask" kindref="compound">MWTask</ref> * to a pointer of the Task type derived for your application. For example <verbatim>            \begin{verbatim}
            My_Task *dt = dynamic_cast&lt;My_Task *&gt; ( t );
            assert( dt );     
            \end{verbatim}</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="229" column="1"/>
        <referencedby refid="classMWDriver_1a0e1ef56017457e099e5947e81dd5d761" compoundref="MWDriver_8C" startline="1386" endline="1415">handle_hostresume</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a8199945d5f7c89bde67962da6d0c7ffe" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>MWReturn</type>
        <definition>MWReturn MWDriver::act_on_starting_worker</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>act_on_starting_worker</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called once the Worker is done with the TaskContainer.<itemizedlist>
<listitem><para>Put the logic for this in <ref refid="classMWDriver" kindref="compound">MWDriver</ref> This function should be implemented by the application to assign the workClass number to the worker if it is doing intelligent work scheduling. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="242" column="1" bodyfile="src/MWDriver.C" bodystart="1185" bodyend="1188"/>
        <referencedby refid="classMWDriver_1ae4c5921926e8780642d1b7dacf1a7016" compoundref="MWDriver_8C" startline="2178" endline="2205">delete_tasks_worse_than</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a6a142fda8b58806b1769558afd17c85c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>MWReturn</type>
        <definition>virtual MWReturn MWDriver::pack_worker_init_data</definition>
        <argsstring>(void)=0</argsstring>
        <name>pack_worker_init_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A common theme of Master-Worker applications is that there is a base amount of &quot;initial&quot; data defining the problem, and then just incremental data defining &quot;Tasks&quot; to be done by the Workers.</para><para>This one packs all the user&apos;s initial data. It is unpacked int the worker class, in unpack_init_data(). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="253" column="1"/>
        <referencedby refid="classMWDriver_1a7b1d0f044688941bd9a0e502b48c4676" compoundref="MWDriver_8C" startline="1191" endline="1275">handle_checksum</referencedby>
        <referencedby refid="classMWDriver_1a9dc5f80c5069e9bddcfee2ad9e5e32e4" compoundref="MWDriver_8C" startline="738" endline="788">refreshWorkers</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aaddea2ee086b0683b5d80ecb0438df91" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void MWDriver::unpack_worker_initinfo</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>unpack_worker_initinfo</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This one unpacks the &quot;initial&quot; information sent to the driver once the worker initializes.</para><para>Potential &quot;initial&quot; information that might be useful is... {itemize}  Information on the worker characteristics etc...  Information on the bandwith between <ref refid="classMWDriver" kindref="compound">MWDriver</ref> and worker {itemize}</para><para>These sorts of things could be useful in building some scheduling intelligence into the driver. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="269" column="1" bodyfile="src/MWDriver.h" bodystart="269" bodyend="269"/>
        <referencedby refid="classMWDriver_1a9dc5f80c5069e9bddcfee2ad9e5e32e4" compoundref="MWDriver_8C" startline="738" endline="788">refreshWorkers</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1af6856e6de5bd17575e809e8e24140844" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void MWDriver::pack_driver_task_data</definition>
        <argsstring>(void)</argsstring>
        <name>pack_driver_task_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>OK, This one is not pure virtual either, but if you have some &quot;driver&quot; data that is conceptually part of the task and you wish not to replicate the data in each task, you can pack it in a message buffer by implementing this function. If you do this, you must implement a matching unpack_worker_task_data() function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="280" column="1" bodyfile="src/MWDriver.h" bodystart="280" bodyend="280"/>
        <referencedby refid="classMWDriver_1a73290f6fab539708112ec28a9e49b563" compoundref="MWDriver_8C" startline="873" endline="902">handle_benchmark</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Data streaming/subtasks</header>
      <description><para>These are the methods that must be implemented to enable data streaming/ subtasks.<itemizedlist>
<listitem><para><ref refid="classMWDriver_1aeb92065d166911049bec838253554555" kindref="member">act_on_completed_subtask()</ref></para></listitem><listitem><para>MWWorker::execute_subtask</para></listitem><listitem><para>MWWorker::set_num_subtask</para></listitem><listitem><para><ref refid="classMWTask_1a1a1b24e608337f787966b5d91f04f7de" kindref="member">MWTask::pack_subresults</ref></para></listitem><listitem><para><ref refid="classMWTask_1ae6fe9fd144486e79c19a1087da1fd7ab" kindref="member">MWTask::unpack_subresults</ref></para></listitem></itemizedlist>
</para><para>A subtask is identified by a <ref refid="classMWTask" kindref="compound">MWTask</ref> and a subtask id. The subtask id starts at 0 and ends at n-1 subtasks.</para><para>When subtasks are enabled, the Master sends the task to the Worker as usual. But instead of calling execute_task once, execute_subtask is called once per subtask id (starting at 0). At the end of each call, the result will be returned to the Master. After all subtasks have completed, the Master is notified that the Task has completed. </para></description>
      <memberdef kind="function" id="classMWDriver_1aeb92065d166911049bec838253554555" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>MWReturn</type>
        <definition>virtual MWReturn MWDriver::act_on_completed_subtask</definition>
        <argsstring>(MWTask *)</argsstring>
        <name>act_on_completed_subtask</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function performs an action that happens once the Driver receives notification of a completed subtask. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="305" column="1" bodyfile="src/MWDriver.h" bodystart="305" bodyend="305"/>
        <references refid="classMWDriver_1a0dfb4201b9bce44ba2a59019f7fc2dd2" compoundref="MWDriver_8C" startline="3389" endline="3406">addSortedTasks</references>
        <references refid="classMWDriver_1aa044c3810502c18efcb32dc77a66a138" compoundref="MWDriver_8C" startline="1895" endline="1904">addTask</references>
        <references refid="classMWDriver_1a8b8a9ff2699780ce52ae600b658c9e4f" compoundref="MWDriver_8C" startline="1873" endline="1892">addTasks</references>
        <references refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" compoundref="MWDriver_8C" startline="2646" endline="2755">checkpoint</references>
        <references refid="classMWDriver_1ae4c5921926e8780642d1b7dacf1a7016" compoundref="MWDriver_8C" startline="2178" endline="2205">delete_tasks_worse_than</references>
        <references refid="classMWDriver_1a71ca10beb1bce49579a44a657ed1f7a8" compoundref="MWDriver_8C" startline="3334" endline="3337">get_number_running_tasks</references>
        <references refid="classMWDriver_1a91e7f38f78eba72bd69103a25730f9a9" compoundref="MWDriver_8C" startline="3329" endline="3332">get_number_tasks</references>
        <references refid="classMWDriver_1a73290f6fab539708112ec28a9e49b563" compoundref="MWDriver_8C" startline="873" endline="902">handle_benchmark</references>
        <references refid="classMWDriver_1a7b1d0f044688941bd9a0e502b48c4676" compoundref="MWDriver_8C" startline="1191" endline="1275">handle_checksum</references>
        <references refid="classMWDriver_1af6c437b207bd8d327ceb84c5ce0c4304" compoundref="MWDriver_8C" startline="1129" endline="1154">handle_hostdel</references>
        <references refid="classMWDriver_1a0e1ef56017457e099e5947e81dd5d761" compoundref="MWDriver_8C" startline="1386" endline="1415">handle_hostresume</references>
        <references refid="classMWDriver_1a91c21e0a4aba8ce4e03ebf7c3064f6b5" compoundref="MWDriver_8C" startline="1278" endline="1357">handle_hostsuspend</references>
        <references refid="classMWDriver_1ab4ee1fc1cbc9f5e07e3083f499d29be0" compoundref="MWDriver_8C" startline="1157" endline="1182">handle_taskexit</references>
        <references refid="classMWDriver_1a8d2aea2804ff2f999ea206a3ee0f096a" compoundref="MWDriver_8C" startline="2147" endline="2175">print_task_keys</references>
        <references refid="classMWDriver_1a9dc5f80c5069e9bddcfee2ad9e5e32e4" compoundref="MWDriver_8C" startline="738" endline="788">refreshWorkers</references>
        <references refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</references>
        <references refid="classMWDriver_1aa34fc54dfba3806db87c297c8b39244a" compoundref="MWDriver_8C" startline="2611" endline="2620">set_checkpoint_frequency</references>
        <references refid="classMWDriver_1a7f803ede53bb0d797bce81d56a33cdf9" compoundref="MWDriver_8C" startline="2623" endline="2633">set_checkpoint_time</references>
        <references refid="classMWDriver_1a390d85849e7f510369c3b81ec4312de7" compoundref="MWDriver_8C" startline="1961" endline="1983">set_machine_ordering_policy</references>
        <references refid="classMWDriver_1a97b4b046a3793d45e28bd1b2fddbd8c1" compoundref="MWDriver_8C" startline="2636" endline="2643">set_suspension_policy</references>
        <references refid="classMWDriver_1ae31fcd35f6e798994a2419db39f9f743" compoundref="MWDriver_8C" startline="1925" endline="1937">set_task_add_mode</references>
        <references refid="classMWDriver_1abe90c9016afecc9bf9b68d4b9f3ba3b7" compoundref="MWDriver_8C" startline="1913" endline="1922">set_task_key_function</references>
        <references refid="classMWDriver_1a5d413e43dbd55fdc211f0aebdd51ac47" compoundref="MWDriver_8C" startline="1940" endline="1958">set_task_retrieve_mode</references>
        <references refid="classMWDriver_1ad41f96ba14ccc7712be09c0374eae9c9" compoundref="MWDriver_8C" startline="1987" endline="2005">set_worker_timeout_limit</references>
        <references refid="classMWDriver_1a69e6f72bc04a6c68046a41bc4292bf64" compoundref="MWDriver_8C" startline="3306" endline="3325">sort_task_list</references>
        <references refid="classMWDriver_1a62ee843c55a50415b8c96c552267bd48" compoundref="MWDriver_8C" startline="719" endline="727">stop_work</references>
        <references refid="classMWDriver_1af239d1566ec6f0657891a027399d1217" compoundref="MWDriver_8C" startline="3359" endline="3362">workClasses_get</references>
        <references refid="classMWDriver_1a0cbd67b86b21fa4676884107bdd48fce" compoundref="MWDriver_8C" startline="3371" endline="3374">workClasses_gettasks</references>
        <references refid="classMWDriver_1a31d60231d425b490ebca37dae8ffd47a" compoundref="MWDriver_8C" startline="3365" endline="3368">workClasses_getworkers</references>
        <references refid="classMWDriver_1a49177e47b2d394aff1bc952e98bb7e19" compoundref="MWDriver_8C" startline="3340" endline="3356">workClasses_set</references>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>B. Task List Management</header>
      <description><para>These functions are to manage the list of Tasks. MW provides default useful functionality for managing the list of tasks. </para></description>
      <memberdef kind="function" id="classMWDriver_1abe90c9016afecc9bf9b68d4b9f3ba3b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::set_task_key_function</definition>
        <argsstring>(MWKey(*)(MWTask *))</argsstring>
        <name>set_task_key_function</name>
        <param>
          <type>MWKey(*)(<ref refid="classMWTask" kindref="compound">MWTask</ref> *)</type>
          <defname>t</defname>
        </param>
        <briefdescription>
<para>Sets the function that <ref refid="classMWDriver" kindref="compound">MWDriver</ref> users to get the &quot;key&quot; for a task. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="355" column="1" bodyfile="src/MWDriver.C" bodystart="1913" bodyend="1922"/>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <references refid="classMWDriver_1a69e6f72bc04a6c68046a41bc4292bf64" compoundref="MWDriver_8C" startline="3306" endline="3325">sort_task_list</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ae31fcd35f6e798994a2419db39f9f743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::set_task_add_mode</definition>
        <argsstring>(MWTaskAdditionMode)</argsstring>
        <name>set_task_add_mode</name>
        <param>
          <type>MWTaskAdditionMode</type>
          <defname>mode</defname>
        </param>
        <briefdescription>
<para>Set the mode you wish for task addition. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="358" column="1" bodyfile="src/MWDriver.C" bodystart="1925" bodyend="1937"/>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a5d413e43dbd55fdc211f0aebdd51ac47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::set_task_retrieve_mode</definition>
        <argsstring>(MWTaskRetrievalMode)</argsstring>
        <name>set_task_retrieve_mode</name>
        <param>
          <type>MWTaskRetrievalMode</type>
          <defname>mode</defname>
        </param>
        <briefdescription>
<para>Set the mode you wish for task retrieval. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="361" column="1" bodyfile="src/MWDriver.C" bodystart="1940" bodyend="1958"/>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a69e6f72bc04a6c68046a41bc4292bf64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::sort_task_list</definition>
        <argsstring>(void)</argsstring>
        <name>sort_task_list</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>This sorts the task list by the key that is set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="364" column="1" bodyfile="src/MWDriver.C" bodystart="3306" bodyend="3325"/>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <referencedby refid="classMWDriver_1abe90c9016afecc9bf9b68d4b9f3ba3b7" compoundref="MWDriver_8C" startline="1913" endline="1922">set_task_key_function</referencedby>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ae4c5921926e8780642d1b7dacf1a7016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::delete_tasks_worse_than</definition>
        <argsstring>(MWKey)</argsstring>
        <name>delete_tasks_worse_than</name>
        <param>
          <type>MWKey</type>
          <defname>key</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This deletes all tasks in the task list with a key worse than the one specified </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="368" column="1" bodyfile="src/MWDriver.C" bodystart="2178" bodyend="2205"/>
        <references refid="classMWDriver_1a8199945d5f7c89bde67962da6d0c7ffe" compoundref="MWDriver_8C" startline="1185" endline="1188">act_on_starting_worker</references>
        <references refid="classMWRMComm_1ac74cbe518e434e9796eba40687a3ec6b">MWRMComm::get_num_exec_classes</references>
        <references refid="classMWRMComm_1a4ded74716925e2213d6f898543491ce1">MWRMComm::hostaddlogic</references>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWDriver_1ada183d37afd5f06bf96c3f716ca90075" compoundref="MWDriver_8C" startline="2448" endline="2451">numWorkers</references>
        <references refid="classMWTask_1a013363bc92d9ce9f0fc36fb4171b03d1" compoundref="MWTask_8C" startline="52" endline="55">MWTask::printself</references>
        <references refid="classMWRMComm_1a532c61bca2f954df18a46fb4f1578606">MWRMComm::removeWorker</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a91e7f38f78eba72bd69103a25730f9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::get_number_tasks</definition>
        <argsstring>()</argsstring>
        <name>get_number_tasks</name>
        <briefdescription>
<para>returns the number of tasks on the todo list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="371" column="1" bodyfile="src/MWDriver.C" bodystart="3329" bodyend="3332"/>
        <referencedby refid="classMWDriver_1a08d81fbcaa68a8fb4ec11afcd81abc1b" compoundref="MWDriver_8C" startline="3505" endline="3510">get_workers_head</referencedby>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a54e42db5bff6f63d6a0dc4886a293a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::getNumWorkers</definition>
        <argsstring>()</argsstring>
        <name>getNumWorkers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="373" column="1" bodyfile="src/MWDriver.C" bodystart="4084" bodyend="4087"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a71ca10beb1bce49579a44a657ed1f7a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::get_number_running_tasks</definition>
        <argsstring>()</argsstring>
        <name>get_number_running_tasks</name>
        <briefdescription>
<para>returns the number of running tasks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="376" column="1" bodyfile="src/MWDriver.C" bodystart="3334" bodyend="3337"/>
        <referencedby refid="classMWDriver_1a08d81fbcaa68a8fb4ec11afcd81abc1b" compoundref="MWDriver_8C" startline="3505" endline="3510">get_workers_head</referencedby>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a8d2aea2804ff2f999ea206a3ee0f096a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::print_task_keys</definition>
        <argsstring>(void)</argsstring>
        <name>print_task_keys</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>(Mostly for debugging) <ndash/> Prints the task keys in the todo list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="379" column="1" bodyfile="src/MWDriver.C" bodystart="2147" bodyend="2175"/>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a49177e47b2d394aff1bc952e98bb7e19" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::workClasses_set</definition>
        <argsstring>(int num)</argsstring>
        <name>workClasses_set</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>Set number of workclasses. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="319" column="1" bodyfile="src/MWDriver.C" bodystart="3340" bodyend="3356"/>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1af239d1566ec6f0657891a027399d1217" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::workClasses_get</definition>
        <argsstring>()</argsstring>
        <name>workClasses_get</name>
        <briefdescription>
<para>Get the number of workclasses. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="322" column="1" bodyfile="src/MWDriver.C" bodystart="3359" bodyend="3362"/>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a62ee843c55a50415b8c96c552267bd48" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::stop_work</definition>
        <argsstring>()</argsstring>
        <name>stop_work</name>
        <briefdescription>
<para>Stop the worker working on this task container and send it a new task container. This should only be called in <ref refid="classMWDriver_1a920118e3f49ab81db5047d9ecdbcea2b" kindref="member">act_on_completed_task(MWTask*)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="325" column="1" bodyfile="src/MWDriver.C" bodystart="719" bodyend="727"/>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1acb947438d2447b15a0d621392802ff2e">MWRMComm::who</references>
        <references refid="classMWRMComm_1a12c2add8bea8577d5d150c49c7d42e5d">MWRMComm::initsend</references>
        <references refid="classMWRMComm_1abfe166a1b1c70e35069fbc0f1beb250f">MWRMComm::send</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a31d60231d425b490ebca37dae8ffd47a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::workClasses_getworkers</definition>
        <argsstring>(int num)</argsstring>
        <name>workClasses_getworkers</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>get number of workers in the specified work class </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="328" column="1" bodyfile="src/MWDriver.C" bodystart="3365" bodyend="3368"/>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a0cbd67b86b21fa4676884107bdd48fce" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::workClasses_gettasks</definition>
        <argsstring>(int num)</argsstring>
        <name>workClasses_gettasks</name>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>get number of tasks in the specified work class </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="330" column="1" bodyfile="src/MWDriver.C" bodystart="3371" bodyend="3374"/>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a9dc5f80c5069e9bddcfee2ad9e5e32e4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::refreshWorkers</definition>
        <argsstring>(int i, MWREFRESH_TYPE)</argsstring>
        <name>refreshWorkers</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>MWREFRESH_TYPE</type>
          <defname>type</defname>
        </param>
        <briefdescription>
<para>Pack new init data for all workers in group i. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="332" column="1" bodyfile="src/MWDriver.C" bodystart="738" bodyend="788"/>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1a12c2add8bea8577d5d150c49c7d42e5d">MWRMComm::initsend</references>
        <references refid="classMWDriver_1a6a142fda8b58806b1769558afd17c85c">pack_worker_init_data</references>
        <references refid="classMWRMComm_1abfe166a1b1c70e35069fbc0f1beb250f">MWRMComm::send</references>
        <references refid="classMWRMComm_1a532c61bca2f954df18a46fb4f1578606">MWRMComm::removeWorker</references>
        <references refid="classMWRMComm_1af5fe22ee99ecbb178dad85b6474fe61f">MWRMComm::unpack</references>
        <references refid="classMWDriver_1aaddea2ee086b0683b5d80ecb0438df91" compoundref="MWDriver_8h" startline="269" endline="269">unpack_worker_initinfo</references>
        <references refid="classMWRMComm_1a611ac04479ee1c3731cf459427d18fb4">MWRMComm::pack</references>
        <references refid="classMWDriver_1a77e388c0446e7c42a8c6d0ee544a29b6" compoundref="MWDriver_8h" startline="690" endline="690">get_benchmark_task</references>
        <references refid="classMWTask_1a57073276fad38e58edda79d35021a52c">MWTask::pack_work</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aa044c3810502c18efcb32dc77a66a138" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::addTask</definition>
        <argsstring>(MWTask *)</argsstring>
        <name>addTask</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <defname>add_task</defname>
        </param>
        <briefdescription>
<para>Add a task to the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="336" column="1" bodyfile="src/MWDriver.C" bodystart="1895" bodyend="1904"/>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWTask_1a97ee3d8338dd2e02a20631e2e595f237" compoundref="MWTask_8C" startline="68" endline="74">MWTask::addGroup</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a8b8a9ff2699780ce52ae600b658c9e4f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::addTasks</definition>
        <argsstring>(int, MWTask **)</argsstring>
        <name>addTasks</name>
        <param>
          <type>int</type>
          <defname>n</defname>
        </param>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> **</type>
          <defname>add_tasks</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a bunch of tasks to the list. You do this by making an array of pointers to MWTasks and giving that array to this function. The <ref refid="classMWDriver" kindref="compound">MWDriver</ref> will take over memory management for the MWTasks, but not for the array of pointers, so don&apos;t forget to delete [] it! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="343" column="1" bodyfile="src/MWDriver.C" bodystart="1873" bodyend="1892"/>
        <references refid="classMWTask_1a97ee3d8338dd2e02a20631e2e595f237" compoundref="MWTask_8C" startline="68" endline="74">MWTask::addGroup</references>
        <references refid="classMWRMComm_1ab4ce8dae654516f77d20fc912da3e188">MWRMComm::exit</references>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a0dfb4201b9bce44ba2a59019f7fc2dd2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::addSortedTasks</definition>
        <argsstring>(int n, MWTask **add_tasks)</argsstring>
        <name>addSortedTasks</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> **</type>
          <declname>add_tasks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This will add a list of tasks that are sorted by key. Efficiency can be greatly improved by using this function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="347" column="1" bodyfile="src/MWDriver.C" bodystart="3389" bodyend="3406"/>
        <references refid="classMWTask_1a97ee3d8338dd2e02a20631e2e595f237" compoundref="MWTask_8C" startline="68" endline="74">MWTask::addGroup</references>
        <references refid="classMWRMComm_1ab4ce8dae654516f77d20fc912da3e188">MWRMComm::exit</references>
        <references refid="classMWWorker_1acd0f3f0d8637352325f1f00919dfeb6f" compoundref="MWWorker_8C" startline="50" endline="66">MWWorker::go</references>
        <references refid="classMWRMComm_1a8cc7e0fa6b024fe7441fca581b4edf83" compoundref="MWRMComm_8h" startline="333" endline="333">MWRMComm::hostadd</references>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ab2a3c48dca3e1b2cd6db093d5a31b8eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::addTaskByKey</definition>
        <argsstring>(MWTask *add_task)</argsstring>
        <name>addTaskByKey</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <declname>add_task</declname>
        </param>
        <briefdescription>
<para>This is a helper function for <ref refid="classMWDriver_1a0dfb4201b9bce44ba2a59019f7fc2dd2" kindref="member">addSortedTasks()</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="351" column="1" bodyfile="src/MWDriver.C" bodystart="3410" bodyend="3425"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>C. Worker Policy Management</header>
      <memberdef kind="function" id="classMWDriver_1a97b4b046a3793d45e28bd1b2fddbd8c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::set_suspension_policy</definition>
        <argsstring>(MWSuspensionPolicy)</argsstring>
        <name>set_suspension_policy</name>
        <param>
          <type>MWSuspensionPolicy</type>
          <defname>policy</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the policy to use when suspending. Currently this can be either DEFAULT or REASSIGN </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="393" column="1" bodyfile="src/MWDriver.C" bodystart="2636" bodyend="2643"/>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a390d85849e7f510369c3b81ec4312de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::set_machine_ordering_policy</definition>
        <argsstring>(MWMachineOrderingPolicy)</argsstring>
        <name>set_machine_ordering_policy</name>
        <param>
          <type>MWMachineOrderingPolicy</type>
          <defname>mode</defname>
        </param>
        <briefdescription>
<para>Sets the machine ordering policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="396" column="1" bodyfile="src/MWDriver.C" bodystart="1961" bodyend="1983"/>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>.  task timeout policy.</header>
      <description><para>MW provides a mechanism for performing tasks on workers that are potentially &quot;lost&quot;. If the RMComm fails to notify MW of a worker going away in a timely fashion, the state of the computing platform and MW&apos;s vision of its state may become out of synch. In order to make sure that all tasks are done in a timely fashion, the user may set a time limit after which a task running on a &quot;lost&quot; worker may be rescheduled. </para></description>
      <memberdef kind="variable" id="classMWDriver_1a2be6943d88a7eeb539a53d6744aef75c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MWDriver::worker_timeout</definition>
        <argsstring></argsstring>
        <name>worker_timeout</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If false : workers never timeout and can potentially work forever on a task If true : workers time out after worker_timeout_limit seconds </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="417" column="1" bodyfile="src/MWDriver.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1afb3ff7e494a9ff6f31318016c8659c06" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MWDriver::worker_timeout_limit</definition>
        <argsstring></argsstring>
        <name>worker_timeout_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Limit of seconds after which workers are considered time out and tasks are re-assigned </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="421" column="1" bodyfile="src/MWDriver.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a2c1cf2f62fee7c45c974de15fd089374" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::worker_timeout_check_frequency</definition>
        <argsstring></argsstring>
        <name>worker_timeout_check_frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>frequency at which we check if there are timed out workers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="424" column="1" bodyfile="src/MWDriver.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a7a2469cbfbf5441069be4607419cfb77" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::next_worker_timeout_check</definition>
        <argsstring></argsstring>
        <name>next_worker_timeout_check</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>based on the time out frequency, next timeout check time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="427" column="1" bodyfile="src/MWDriver.h" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ad41f96ba14ccc7712be09c0374eae9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::set_worker_timeout_limit</definition>
        <argsstring>(double timeout_limit, int timeout_frequency)</argsstring>
        <name>set_worker_timeout_limit</name>
        <param>
          <type>double</type>
          <declname>timeout_limit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout_frequency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the timeout_limit and turn worker_timeout to 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="435" column="1" bodyfile="src/MWDriver.C" bodystart="1987" bodyend="2005"/>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWTask_1a3899784f624c803ae211ab781f180ca3" compoundref="MWTask_8h" startline="70">MWTask::taskType</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a0f8d0afccf1d735924504d62c4b6b018" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::reassign_tasks_timedout_workers</definition>
        <argsstring>()</argsstring>
        <name>reassign_tasks_timedout_workers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Go through the list of timed out WORKING workers and reschedule tasks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="430" column="1" bodyfile="src/MWDriver.C" bodystart="2007" bodyend="2144"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>D. Event Handling Methods</header>
      <description><para>In the case that the user wants to take specific actions when notified of processors going away, these methods may be reimplemented. Care must be taken when reimplementing these, or else things may get messed up.</para><para>Probably a better solution in the long run is to provide users hooks into these functions or something.</para><para>Basic default functionality that updates the known status of our virtual machine is provided. </para></description>
      <memberdef kind="function" id="classMWDriver_1a73290f6fab539708112ec28a9e49b563" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>MWReturn</type>
        <definition>MWReturn MWDriver::handle_benchmark</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>handle_benchmark</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Here, we get back the benchmarking results, which tell us something about the worker we&apos;ve got. Also, we could get some sort of error back from the worker at this stage, in which case we remove it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="462" column="1" bodyfile="src/MWDriver.C" bodystart="873" bodyend="902"/>
        <references refid="classMWRMComm_1a12c2add8bea8577d5d150c49c7d42e5d">MWRMComm::initsend</references>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWRMComm_1a611ac04479ee1c3731cf459427d18fb4">MWRMComm::pack</references>
        <references refid="classMWDriver_1af6856e6de5bd17575e809e8e24140844" compoundref="MWDriver_8h" startline="280" endline="280">pack_driver_task_data</references>
        <references refid="classMWTask_1a57073276fad38e58edda79d35021a52c">MWTask::pack_work</references>
        <references refid="classMWRMComm_1a532c61bca2f954df18a46fb4f1578606">MWRMComm::removeWorker</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1abfe166a1b1c70e35069fbc0f1beb250f">MWRMComm::send</references>
        <references refid="classMWTask_1a3899784f624c803ae211ab781f180ca3" compoundref="MWTask_8h" startline="70">MWTask::taskType</references>
        <references refid="classMWRMComm_1af5fe22ee99ecbb178dad85b6474fe61f">MWRMComm::unpack</references>
        <references refid="classMWTask_1ab7fc4bb108116fe6f5b33b818e6a8650" compoundref="MWTask_8h" startline="153">MWTask::worker</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1af6c437b207bd8d327ceb84c5ce0c4304" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MWDriver::handle_hostdel</definition>
        <argsstring>()</argsstring>
        <name>handle_hostdel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is what gets called when a host goes away. We figure out who died, remove that worker from our records, remove its task from the running queue (if it was running one) and put that task back on the todo list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="469" column="1" bodyfile="src/MWDriver.C" bodystart="1129" bodyend="1154"/>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1acb947438d2447b15a0d621392802ff2e">MWRMComm::who</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a91c21e0a4aba8ce4e03ebf7c3064f6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MWDriver::handle_hostsuspend</definition>
        <argsstring>()</argsstring>
        <name>handle_hostsuspend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements a suspension policy. Currently either DEFAULT or REASSIGN, depending on how suspensionPolicy is set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="473" column="1" bodyfile="src/MWDriver.C" bodystart="1278" bodyend="1357"/>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1acb947438d2447b15a0d621392802ff2e">MWRMComm::who</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a0e1ef56017457e099e5947e81dd5d761" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MWDriver::handle_hostresume</definition>
        <argsstring>()</argsstring>
        <name>handle_hostresume</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Here&apos;s where you go when a host gets resumed. Usually, you do nothing...but it&apos;s nice to know... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="477" column="1" bodyfile="src/MWDriver.C" bodystart="1386" bodyend="1415"/>
        <references refid="classMWDriver_1a920118e3f49ab81db5047d9ecdbcea2b">act_on_completed_task</references>
        <references refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" compoundref="MWDriver_8C" startline="2646" endline="2755">checkpoint</references>
        <references refid="classMWTask_1a5f954bdae3d554327beab944c8e51125" compoundref="MWTask_8h" startline="79">MWTask::cpu_time</references>
        <references refid="classMWTask_1a918669fb822fed85add7b5ca3b8aeafe" compoundref="MWTask_8C" startline="77" endline="83">MWTask::deleteGroup</references>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <references refid="classMWTask_1a3899784f624c803ae211ab781f180ca3" compoundref="MWTask_8h" startline="70">MWTask::taskType</references>
        <references refid="classMWRMComm_1af5fe22ee99ecbb178dad85b6474fe61f">MWRMComm::unpack</references>
        <references refid="classMWTask_1ab22e3eb9a27b8d115063e79067856166">MWTask::unpack_results</references>
        <references refid="classMWRMComm_1acb947438d2447b15a0d621392802ff2e">MWRMComm::who</references>
        <references refid="classMWTask_1ab7fc4bb108116fe6f5b33b818e6a8650" compoundref="MWTask_8h" startline="153">MWTask::worker</references>
        <references refid="classMWTask_1ae503d6480ef81dcc1ccd7927e4655226" compoundref="MWTask_8h" startline="76">MWTask::working_time</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ab4ee1fc1cbc9f5e07e3083f499d29be0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MWDriver::handle_taskexit</definition>
        <argsstring>()</argsstring>
        <name>handle_taskexit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>We do basically the same thing as <ref refid="classMWDriver_1af6c437b207bd8d327ceb84c5ce0c4304" kindref="member">handle_hostdel()</ref>. One might {<emphasis>think}</emphasis> that we could restart something on that host; in practice, however <ndash/> especially with the Condor-PVM RMComm implementation <ndash/> it means that the host has gone down, too. We put that host&apos;s task back on the todo list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="485" column="1" bodyfile="src/MWDriver.C" bodystart="1157" bodyend="1182"/>
        <references refid="classMWRMComm_1a532c61bca2f954df18a46fb4f1578606">MWRMComm::removeWorker</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1acb947438d2447b15a0d621392802ff2e">MWRMComm::who</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a7b1d0f044688941bd9a0e502b48c4676" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MWDriver::handle_checksum</definition>
        <argsstring>()</argsstring>
        <name>handle_checksum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Routine to handle when the communication layer says that a checksum error happened. If the underlying Communitor gives a reliably reliable communication then this messge need not be generated. But for some Communicators like MW-File we may need some thing like this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="493" column="1" bodyfile="src/MWDriver.C" bodystart="1191" bodyend="1275"/>
        <references refid="classMWDriver_1a77e388c0446e7c42a8c6d0ee544a29b6" compoundref="MWDriver_8h" startline="690" endline="690">get_benchmark_task</references>
        <references refid="classMWRMComm_1a12c2add8bea8577d5d150c49c7d42e5d">MWRMComm::initsend</references>
        <references refid="classMWRMComm_1a611ac04479ee1c3731cf459427d18fb4">MWRMComm::pack</references>
        <references refid="classMWTask_1a57073276fad38e58edda79d35021a52c">MWTask::pack_work</references>
        <references refid="classMWDriver_1a6a142fda8b58806b1769558afd17c85c">pack_worker_init_data</references>
        <references refid="classMWRMComm_1a532c61bca2f954df18a46fb4f1578606">MWRMComm::removeWorker</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1abfe166a1b1c70e35069fbc0f1beb250f">MWRMComm::send</references>
        <references refid="classMWRMComm_1acb947438d2447b15a0d621392802ff2e">MWRMComm::who</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>E. Checkpoint Handling Functions</header>
      <description><para>These are logical checkpoint handling functions. They are virtual, and are <emphasis>entirely</emphasis> application-specific. In them, the user must save the &quot;state&quot; of the application to permanent storage (disk). To do this, you need to:</para><para>{itemize}  Implement the methods <ref refid="classMWDriver_1ab3a42409894c40f6992f01b433174588" kindref="member">write_master_state()</ref> and <ref refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" kindref="member">read_master_state()</ref> in your derived <ref refid="classMWDriver" kindref="compound">MWDriver</ref> app.  Implement the methods write_ckpt_info() and read_ckpt_info() in your derived <ref refid="classMWTask" kindref="compound">MWTask</ref> class. {itemize}</para><para>Then <ref refid="classMWDriver" kindref="compound">MWDriver</ref> does the rest for you. When <ref refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" kindref="member">checkpoint()</ref> is called (see below) it opens up a known filename for writing. It passes the file pointer of that file to <ref refid="classMWDriver_1ab3a42409894c40f6992f01b433174588" kindref="member">write_master_state()</ref>, which dumps the &quot;state&quot; of the master to that fp. Here &quot;sate&quot; includes all the variables, info, etc of YOUR CLASS THAT WAS DERIVED FROM MWDRIVER. All state in MWDriver.C is taken care of (there&apos;s not much). Next, checkpoint will walk down the running queue and the todo queue and call each member&apos;s write_ckpt_info().</para><para>Upon restart, <ref refid="classMWDriver" kindref="compound">MWDriver</ref> will detect the presence of the checkpoint file and restart from it. It calls <ref refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" kindref="member">read_master_state()</ref>, which is the inverse of <ref refid="classMWDriver_1ab3a42409894c40f6992f01b433174588" kindref="member">write_master_state()</ref>. Then, for each task in the checkpoint file, it creates a new <ref refid="classMWTask" kindref="compound">MWTask</ref>, calls read_ckpt_info() on it, and adds it to the todo queue.</para><para>We start from there and proceed as normal.</para><para>One can set the &quot;frequency&quot; that checkpoint files will be written (using <ref refid="classMWDriver_1aa34fc54dfba3806db87c297c8b39244a" kindref="member">set_checkpoint_frequency()</ref>). The default frequency is zero - no checkpointing. When the frequency is set to n, every nth time that act_on_completed_task gets called, we checkpoint immediately afterwards. If your application involves &quot;work steps&quot;, you probably will want to leave the frequency at zero and call checkpoint yourself at the end of a work step. </para></description>
      <memberdef kind="variable" id="classMWDriver_1a5d6cd75e67e0ada97bb12c7239a7661f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MWDriver::has_task_swapped</definition>
        <argsstring></argsstring>
        <name>has_task_swapped</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="657" column="1" bodyfile="src/MWDriver.h" bodystart="657" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a3e403584528d3ede889f7d8f1db2cbf1" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MWDriver::max_task_key</definition>
        <argsstring></argsstring>
        <name>max_task_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="658" column="1" bodyfile="src/MWDriver.h" bodystart="658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a033da9ddab14c10d0c174ee778234221" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::MIN_IN_MEM</definition>
        <argsstring></argsstring>
        <name>MIN_IN_MEM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Swap the unused part of the (sorted and indexed) TODO list onto disk (file name: TODO_tasks.id), so that the TODO tasks with smaller key values are kept in memory, and others are kept in a file. When there are too many tasks in memory, we swap most of them out; when there are too few tasks in memory, we swap in more. The MW application will be done only when all TODO tasks are done. When checkpointing, it only saves TODO tasks in memory, and the pointers (the file name) to the swap file.</para><para>To help swapping in tasks, we will record the number of tasks swapped in at the beginning of the file, and skip then when read to swap file. The num_to_skip is initially set to 0.</para><para>The swap file for TODO tasks is fully-sorted, and looks like:</para><para>num_to_skip trash_task1 trash_task2 ... ... task1 task2 ... ... task[num_tasks]When swapping out, we walk through the sorted TODO list, keep the first num_in_mem tasks in memory (copy into a newly created list). For the rest of the list, merge it in order with existing tasks in the file TODO_tasks, and write them into a newly created swap file. Tasks in swap file whose key values are larger than max_key are removed. When done, delete the old TODO list and swap file, switch to the new ones.</para><para>If the old TODO list is not too large (&lt;max_in_mem), won&apos;t swap out. Return value indicates whether the swapping is successful or not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="627" column="1" bodyfile="src/MWDriver.h" bodystart="586" bodyend="-1"/>
        <referencedby refid="classMWDriver_1a5e0110a01075a9dfd3e93053b22f9ef0" compoundref="MWDriver_8C" startline="79" endline="169">MWDriver</referencedby>
        <referencedby refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" compoundref="MWDriver_8h" startline="586" endline="586">read_master_state</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a8b7f11eb5034f28a30e51889e0a005b9" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::NUM_IN_MEM_LO</definition>
        <argsstring></argsstring>
        <name>NUM_IN_MEM_LO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="628" column="1" bodyfile="src/MWDriver.h" bodystart="628" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1aa3a1e82a5a6cb3cd9a7d3103f0d2f00e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::NUM_IN_MEM_HI</definition>
        <argsstring></argsstring>
        <name>NUM_IN_MEM_HI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="629" column="1" bodyfile="src/MWDriver.h" bodystart="629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1af1534851c44c7bddddac325f7ab490e8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::MAX_IN_MEM</definition>
        <argsstring></argsstring>
        <name>MAX_IN_MEM</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="630" column="1" bodyfile="src/MWDriver.h" bodystart="630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::checkpoint</definition>
        <argsstring>()</argsstring>
        <name>checkpoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function writes the current state of the job to disk. See the section header to see how it does this. <simplesect kind="see"><para><ref refid="classMWTask" kindref="compound">MWTask</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="546" column="1" bodyfile="src/MWDriver.C" bodystart="2646" bodyend="2755"/>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWTask_1a3899784f624c803ae211ab781f180ca3" compoundref="MWTask_8h" startline="70">MWTask::taskType</references>
        <references refid="classMWRMComm_1a497ab814d1bc00c8fa562e85c2fd6570">MWRMComm::write_checkpoint</references>
        <references refid="classMWTask_1af6ec7477171732f7e3a6de76a86b37a6" compoundref="MWTask_8h" startline="124" endline="124">MWTask::write_ckpt_info</references>
        <references refid="classMWDriver_1ab3a42409894c40f6992f01b433174588" compoundref="MWDriver_8h" startline="581" endline="581">write_master_state</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a0e1ef56017457e099e5947e81dd5d761" compoundref="MWDriver_8C" startline="1386" endline="1415">handle_hostresume</referencedby>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
        <referencedby refid="classMWDriver_1aaa70ab2dd6087ef2415824f770747f8f" compoundref="MWDriver_8C" startline="3187" endline="3291">swap_in_todo_tasks</referencedby>
        <referencedby refid="classMWDriver_1afa05516157b292a420ba6770fd2f493c" compoundref="MWDriver_8C" startline="2956" endline="3184">swap_out_todo_tasks</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::restart_from_ckpt</definition>
        <argsstring>()</argsstring>
        <name>restart_from_ckpt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function does the inverse of checkpoint. It opens the checkpoint file, calls <ref refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" kindref="member">read_master_state()</ref>, then, for each task class in the file, creates a <ref refid="classMWTask" kindref="compound">MWTask</ref>, calls read_ckpt_info on it, and adds that class to the todo list. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="554" column="1" bodyfile="src/MWDriver.C" bodystart="2758" bodyend="2906"/>
        <references refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" compoundref="MWDriver_8C" startline="2646" endline="2755">checkpoint</references>
        <references refid="classMWDriver_1a7d37eab370800bcc1fed37bff6c92643">gimme_a_task</references>
        <references refid="classMWTask_1ad133dd1be9c974871a1564e78eed8715" compoundref="MWTask_8h" startline="66">MWTask::number</references>
        <references refid="classMWDriver_1a8d2aea2804ff2f999ea206a3ee0f096a" compoundref="MWDriver_8C" startline="2147" endline="2175">print_task_keys</references>
        <references refid="classMWTask_1a013363bc92d9ce9f0fc36fb4171b03d1" compoundref="MWTask_8C" startline="52" endline="55">MWTask::printself</references>
        <references refid="classMWRMComm_1ac04df4ffaa419034cf0ee335cd932dcd">MWRMComm::read_checkpoint</references>
        <references refid="classMWTask_1ab370bc3712cfd33ff9a22462d62f3f0f" compoundref="MWTask_8h" startline="127" endline="127">MWTask::read_ckpt_info</references>
        <references refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" compoundref="MWDriver_8h" startline="586" endline="586">read_master_state</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWDriver_1ae31fcd35f6e798994a2419db39f9f743" compoundref="MWDriver_8C" startline="1925" endline="1937">set_task_add_mode</references>
        <references refid="classMWDriver_1a69e6f72bc04a6c68046a41bc4292bf64" compoundref="MWDriver_8C" startline="3306" endline="3325">sort_task_list</references>
        <references refid="classMWDriver_1afa05516157b292a420ba6770fd2f493c" compoundref="MWDriver_8C" startline="2956" endline="3184">swap_out_todo_tasks</references>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <references refid="classMWTask_1af6ec7477171732f7e3a6de76a86b37a6" compoundref="MWTask_8h" startline="124" endline="124">MWTask::write_ckpt_info</references>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aa34fc54dfba3806db87c297c8b39244a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::set_checkpoint_frequency</definition>
        <argsstring>(int freq)</argsstring>
        <name>set_checkpoint_frequency</name>
        <param>
          <type>int</type>
          <declname>freq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function sets the frequency with with checkpoints are done. It returns the former frequency value. The default frequency is zero (no checkpoints). If the frequency is n, then a checkpoint will occur after the nth call to <ref refid="classMWDriver_1a920118e3f49ab81db5047d9ecdbcea2b" kindref="member">act_on_completed_task()</ref>. A good place to set this is in <ref refid="classMWDriver_1acf0edc86b06b46968114c8bb770791b2" kindref="member">get_userinfo()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>freq</parametername>
</parameternamelist>
<parameterdescription>
<para>The frequency to set checkpoints to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The former frequency value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="567" column="1" bodyfile="src/MWDriver.C" bodystart="2611" bodyend="2620"/>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a7f803ede53bb0d797bce81d56a33cdf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::set_checkpoint_time</definition>
        <argsstring>(int secs)</argsstring>
        <name>set_checkpoint_time</name>
        <param>
          <type>int</type>
          <declname>secs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a time-based frequency for checkpoints. The time units are in seconds. A value of 0 &quot;turns off&quot; time-based checkpointing. Time-based checkpointing cannot be &quot;turned 
on&quot; unless the checkpoint_frequency is set to 0. A good place to do this is in <ref refid="classMWDriver_1acf0edc86b06b46968114c8bb770791b2" kindref="member">get_userinfo()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>secs</parametername>
</parameternamelist>
<parameterdescription>
<para>Checkpoint every &quot;secs&quot; seconds </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The former time frequency value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="577" column="1" bodyfile="src/MWDriver.C" bodystart="2623" bodyend="2633"/>
        <referencedby refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ab3a42409894c40f6992f01b433174588" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void MWDriver::write_master_state</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>write_master_state</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Here you write out all &apos;state&apos; of the driver to fp. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>A file pointer that has been opened for writing. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="581" column="1" bodyfile="src/MWDriver.h" bodystart="581" bodyend="581"/>
        <referencedby refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" compoundref="MWDriver_8C" startline="2646" endline="2755">checkpoint</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void MWDriver::read_master_state</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>read_master_state</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Here, you read in the &apos;state&apos; of the driver from fp. Note that this is the reverse of <ref refid="classMWDriver_1ab3a42409894c40f6992f01b433174588" kindref="member">write_master_state()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>A file pointer that has been opened for reading. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="586" column="1" bodyfile="src/MWDriver.h" bodystart="586" bodyend="586"/>
        <references refid="classMWDriver_1a7d37eab370800bcc1fed37bff6c92643">gimme_a_task</references>
        <references refid="classMWDriver_1a184d950e15be4aa0ecb22d7eaea622fe" compoundref="MWDriver_8C" startline="3294" endline="3303">is_TODO_empty</references>
        <references refid="classMWDriver_1a033da9ddab14c10d0c174ee778234221" compoundref="MWDriver_8h" startline="586">MIN_IN_MEM</references>
        <references refid="classMWDriver_1aaa70ab2dd6087ef2415824f770747f8f" compoundref="MWDriver_8C" startline="3187" endline="3291">swap_in_todo_tasks</references>
        <references refid="classMWDriver_1afa05516157b292a420ba6770fd2f493c" compoundref="MWDriver_8C" startline="2956" endline="3184">swap_out_todo_tasks</references>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1afa05516157b292a420ba6770fd2f493c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MWDriver::swap_out_todo_tasks</definition>
        <argsstring>(int num_in_mem=2048, int max_in_mem=204800, double max_key=DBL_MAX)</argsstring>
        <name>swap_out_todo_tasks</name>
        <param>
          <type>int</type>
          <declname>num_in_mem</declname>
          <defval>2048</defval>
        </param>
        <param>
          <type>int</type>
          <declname>max_in_mem</declname>
          <defval>204800</defval>
        </param>
        <param>
          <type>double</type>
          <declname>max_key</declname>
          <defval>DBL_MAX</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TODO Tasks Swapping </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="633" column="1" bodyfile="src/MWDriver.C" bodystart="2956" bodyend="3184"/>
        <references refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" compoundref="MWDriver_8C" startline="2646" endline="2755">checkpoint</references>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <referencedby refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" compoundref="MWDriver_8h" startline="586" endline="586">read_master_state</referencedby>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aaa70ab2dd6087ef2415824f770747f8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MWDriver::swap_in_todo_tasks</definition>
        <argsstring>(int min_in_mem=256, int num_in_mem=25600)</argsstring>
        <name>swap_in_todo_tasks</name>
        <param>
          <type>int</type>
          <declname>min_in_mem</declname>
          <defval>256</defval>
        </param>
        <param>
          <type>int</type>
          <declname>num_in_mem</declname>
          <defval>25600</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When swapping in, we first read first num_in_mem (or all tasks if not so many tasks in swap file) tasks from the swap file, create tasks and append to a newly created list. Then we sorted insert the existing tasks in memory into the new list. When done, switch the list and file.</para><para>If the old TODO list is not too small (&gt;num_in_mem), won&apos;t swap in. Return value indicates whether the swapping is successful or not. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="645" column="1" bodyfile="src/MWDriver.C" bodystart="3187" bodyend="3291"/>
        <references refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" compoundref="MWDriver_8C" startline="2646" endline="2755">checkpoint</references>
        <references refid="classMWDriver_1a7d37eab370800bcc1fed37bff6c92643">gimme_a_task</references>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <referencedby refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" compoundref="MWDriver_8h" startline="586" endline="586">read_master_state</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a184d950e15be4aa0ecb22d7eaea622fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MWDriver::is_TODO_empty</definition>
        <argsstring>()</argsstring>
        <name>is_TODO_empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>See whether we still have TODO tasks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="649" column="1" bodyfile="src/MWDriver.C" bodystart="3294" bodyend="3303"/>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
        <referencedby refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" compoundref="MWDriver_8h" startline="586" endline="586">read_master_state</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a394381ef1a29bd1300184793e0e8c5da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        <definition>MWTask * MWDriver::read_mem_task</definition>
        <argsstring>(MWList&lt; MWTask &gt; *tasks)</argsstring>
        <name>read_mem_task</name>
        <param>
          <type>MWList&lt; <ref refid="classMWTask" kindref="compound">MWTask</ref> &gt; *</type>
          <declname>tasks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="652" column="1" bodyfile="src/MWDriver.C" bodystart="2910" bodyend="2918"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ade316a0388ef55bf25048ed484b66a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        <definition>MWTask * MWDriver::read_file_task</definition>
        <argsstring>(FILE *f)</argsstring>
        <name>read_file_task</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="653" column="1" bodyfile="src/MWDriver.C" bodystart="2921" bodyend="2937"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a9791a018c5711fd6590af5f29d49877f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::write_task</definition>
        <argsstring>(FILE *f, MWTask *t)</argsstring>
        <name>write_task</name>
        <param>
          <type>FILE *</type>
          <declname>f</declname>
        </param>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="654" column="1" bodyfile="src/MWDriver.C" bodystart="2940" bodyend="2947"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a7d37eab370800bcc1fed37bff6c92643" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        <definition>virtual MWTask* MWDriver::gimme_a_task</definition>
        <argsstring>()=0</argsstring>
        <name>gimme_a_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>It&apos;s really annoying that the user has to do this, but they do. The thing is, we have to make a new task of the user&apos;s derived type when we read in the checkpoint file.</para><para>If your application coredumps when trying to restart from a checkpoint, it might be becasue you haven&apos;t implemented this function.</para><para>{verbatim} MWTask* <ref refid="classMWDriver_1a7d37eab370800bcc1fed37bff6c92643" kindref="member">gimme_a_task()</ref> { return new &lt;your derived=&quot;&quot; task=&quot;&quot; class&gt;=&quot;&quot;&gt;; } {verbatim} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="675" column="1"/>
        <referencedby refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" compoundref="MWDriver_8h" startline="586" endline="586">read_master_state</referencedby>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
        <referencedby refid="classMWDriver_1aaa70ab2dd6087ef2415824f770747f8f" compoundref="MWDriver_8C" startline="3187" endline="3291">swap_in_todo_tasks</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Benchmarking</header>
      <description><para>We now have a user-defined benchmarking phase. The user can &quot;register&quot; a task that is sent to each worker upon startup. This way, the user knows which machines are fastest, and MW can perform can automatic &quot;normalization&quot; of the equivalent CPU time. </para></description>
      <memberdef kind="function" id="classMWDriver_1ad0a6b24ff90e2d2ae1495062fb480f24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::register_benchmark_task</definition>
        <argsstring>(MWTask *t)</argsstring>
        <name>register_benchmark_task</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>register the task that will be used for benchmarking. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="687" column="1" bodyfile="src/MWDriver.h" bodystart="687" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a77e388c0446e7c42a8c6d0ee544a29b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        <definition>MWTask* MWDriver::get_benchmark_task</definition>
        <argsstring>()</argsstring>
        <name>get_benchmark_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the benchmark task </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="690" column="1" bodyfile="src/MWDriver.h" bodystart="690" bodyend="690"/>
        <referencedby refid="classMWDriver_1a7b1d0f044688941bd9a0e502b48c4676" compoundref="MWDriver_8C" startline="1191" endline="1275">handle_checksum</referencedby>
        <referencedby refid="classMWDriver_1a9dc5f80c5069e9bddcfee2ad9e5e32e4" compoundref="MWDriver_8C" startline="738" endline="788">refreshWorkers</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Main Internal Handling Routines</header>
      <memberdef kind="variable" id="classMWDriver_1aac856cee1cb23d4c045b47b5f58509ff" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::outstanding_spawn</definition>
        <argsstring></argsstring>
        <name>outstanding_spawn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="785" column="1" bodyfile="src/MWDriver.h" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a9efd68e2a40dd021b82357a2e3fdea2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWReturn</type>
        <definition>MWReturn MWDriver::master_setup</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>master_setup</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method is called before master_mainloop() is. It does some setup, including calling the <ref refid="classMWDriver_1acf0edc86b06b46968114c8bb770791b2" kindref="member">get_userinfo()</ref> and create_initial_tasks() methods. It then figures out how many machines it has and starts worker processes on them. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argc</parametername>
</parameternamelist>
<parameterdescription>
<para>The argc from the command line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>The argv from the command line </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This is the from the user&apos;s <ref refid="classMWDriver_1acf0edc86b06b46968114c8bb770791b2" kindref="member">get_userinfo()</ref> routine. If <ref refid="classMWDriver_1acf0edc86b06b46968114c8bb770791b2" kindref="member">get_userinfo()</ref> returns OK, then the return value is from the user&apos;s <ref refid="classMWDriver_1a618bdbf6e481a903455e068ba37ba0fa" kindref="member">setup_initial_tasks()</ref> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="710" column="1" bodyfile="src/MWDriver.C" bodystart="260" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a88b1c9ad22443557f0dcbd62c45d436d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWReturn</type>
        <definition>MWReturn MWDriver::master_mainloop</definition>
        <argsstring>()</argsstring>
        <name>master_mainloop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is the main controlling routine of the master. It sits in a loop that accepts a message and then (in a big switch statement) calls routines to deal with that message. This loop ends when there are no jobs on either the running or todo queues. It is probably best to see the switch staement yourself to see which routines are called when. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="719" column="1" bodyfile="src/MWDriver.C" bodystart="391" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1af9e63e7278bac6df108015ff56465e53" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWReturn</type>
        <definition>MWReturn MWDriver::worker_init</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>worker_init</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unpacks the initial worker information, and sends the application startup information (by calling pure virtual { <ref refid="classMWDriver_1a6a142fda8b58806b1769558afd17c85c" kindref="member">pack_worker_init_data()</ref>}</para><para>The return value is taken as the return value from the user&apos;s { <ref refid="classMWDriver_1a6a142fda8b58806b1769558afd17c85c" kindref="member">pack_worker_init_data()</ref>} function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="731" column="1" bodyfile="src/MWDriver.C" bodystart="810" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a8f2a93a66bc9a373e043d4244d2af995" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWReturn</type>
        <definition>MWReturn MWDriver::create_initial_tasks</definition>
        <argsstring>()</argsstring>
        <name>create_initial_tasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This routine sets up the list of initial tasks to do on the todo list. In calls the pure virtual function { <ref refid="classMWDriver_1a618bdbf6e481a903455e068ba37ba0fa" kindref="member">setup_initial_tasks()</ref>}. <simplesect kind="return"><para>Is taken from the return value of { <ref refid="classMWDriver_1a618bdbf6e481a903455e068ba37ba0fa" kindref="member">setup_initial_tasks()</ref>}. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="740" column="1" bodyfile="src/MWDriver.C" bodystart="368" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a386f02d1b37ceea2b3ff1a2cbf8e44fb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWReturn</type>
        <definition>MWReturn MWDriver::handle_worker_results</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>handle_worker_results</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Act on a &quot;completed task&quot; message from a worker. Calls pure virtual function { <ref refid="classMWDriver_1a920118e3f49ab81db5047d9ecdbcea2b" kindref="member">act_on_completed_task()</ref>}. <simplesect kind="return"><para>Is from the return value of { <ref refid="classMWDriver_1a920118e3f49ab81db5047d9ecdbcea2b" kindref="member">act_on_completed_task()</ref>}. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="747" column="1" bodyfile="src/MWDriver.C" bodystart="1474" bodyend="1720"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aa3a3b5690857370cdec07ea91d98639a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::send_task_to_worker</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>send_task_to_worker</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>We grab the next task off the todo list, make and send a work message, and send it to a worker. That worker is marked as &quot;working&quot; and has its runningtask pointer set to that task. The worker pointer in the task is set to that worker. The task is then placed on the running queue. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="755" column="1" bodyfile="src/MWDriver.C" bodystart="943" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a5cdae273f688d42c363c0865f42cc645" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::rematch_tasks_to_workers</definition>
        <argsstring>(MWWorkerID *nosend)</argsstring>
        <name>rematch_tasks_to_workers</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>nosend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>After each result message is processed, we try to match up tasks with workers. (New tasks might have been added to the list during processing of a message). Don&apos;t send a task to &quot;nosend&quot;, since he just reported in. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="762" column="1" bodyfile="src/MWDriver.C" bodystart="1723" bodyend="1740"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a51286850643bc27d17eb2bafe05845f3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::call_hostaddlogic</definition>
        <argsstring>()</argsstring>
        <name>call_hostaddlogic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A wrapper around the lower level&apos;s hostaddlogic. Handles things like counting machines and deleting surplus </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="766" column="1" bodyfile="src/MWDriver.C" bodystart="2347" bodyend="2445"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a2cc000c8e2117d184386516fb3447d5f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::kill_workers</definition>
        <argsstring>()</argsstring>
        <name>kill_workers</name>
        <briefdescription>
<para>Kill all the workers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="769" column="1" bodyfile="src/MWDriver.C" bodystart="905" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a702f660876d845b64e31d219219e88ab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::hostPostmortem</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>hostPostmortem</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is called in both handle_hostdelete and handle_taskexit. It removes the host from our records and cleans up relevent pointers with the task it&apos;s running. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="775" column="1" bodyfile="src/MWDriver.C" bodystart="1418" bodyend="1471"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a54dd5ee89c012ec1f34889194c10af07" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::ControlPanel</definition>
        <argsstring>()</argsstring>
        <name>ControlPanel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The control panel that controls the execution of the independent mode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="781" column="1" bodyfile="src/MWDriver.C" bodystart="3432" bodyend="3458"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a4e010a2f5fcccfe96710e35304ec3781" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWReturn</type>
        <definition>MWReturn MWDriver::master_mainloop_oneshot</definition>
        <argsstring>(int buf_id, int sending_host)</argsstring>
        <name>master_mainloop_oneshot</name>
        <param>
          <type>int</type>
          <declname>buf_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sending_host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="783" column="1" bodyfile="src/MWDriver.C" bodystart="417" bodyend="716"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Internal Task List Routines</header>
      <description><para>These methods and data are responsible for managing the list of tasks to be done </para></description>
      <memberdef kind="variable" id="classMWDriver_1a63d3de5053ac938a14953fbae46e0e88" prot="private" static="no" mutable="no">
        <type>MWTaskAdditionMode</type>
        <definition>MWTaskAdditionMode MWDriver::addmode</definition>
        <argsstring></argsstring>
        <name>addmode</name>
        <briefdescription>
<para>Where should tasks be added to the list? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="834" column="1" bodyfile="src/MWDriver.h" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1ad8c2af387c3857b0ed7ecef6e51dff2e" prot="private" static="no" mutable="no">
        <type>MWTaskRetrievalMode</type>
        <definition>MWTaskRetrievalMode MWDriver::getmode</definition>
        <argsstring></argsstring>
        <name>getmode</name>
        <briefdescription>
<para>Where should tasks by retrived from the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="837" column="1" bodyfile="src/MWDriver.h" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a510a0371be6a0229f62d39639830baa7" prot="private" static="no" mutable="no">
        <type>MWKey(*</type>
        <definition>MWKey(* MWDriver::worker_key) (MWWorkerID *)</definition>
        <argsstring>)(MWWorkerID *)</argsstring>
        <name>worker_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to the function that returns the &quot;key&quot; by which machines are ranked. Right now, we offer only some (hopefully useful) default functions that are set through the machine_ordering_policy </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="844" column="1" bodyfile="src/MWDriver.h" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1adfb10771b5b5521f2935bd781b9d70fb" prot="private" static="no" mutable="no">
        <type>MWMachineOrderingPolicy</type>
        <definition>MWMachineOrderingPolicy MWDriver::machine_ordering_policy</definition>
        <argsstring></argsstring>
        <name>machine_ordering_policy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="847" column="1" bodyfile="src/MWDriver.h" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1afb21eace76d7b787027122f94c435e85" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::task_counter</definition>
        <argsstring></argsstring>
        <name>task_counter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="classMWDriver" kindref="compound">MWDriver</ref> keeps a unique identifier for each task <ndash/> here&apos;s the counter </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="851" column="1" bodyfile="src/MWDriver.h" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a36dca1456b0cba5c13c93c0eb464ab4e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MWDriver::listsorted</definition>
        <argsstring></argsstring>
        <name>listsorted</name>
        <briefdescription>
<para>Is the list sorted by the current key function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="854" column="1" bodyfile="src/MWDriver.h" bodystart="854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a25db54a2f87d2b29d4c701de16dc9465" prot="private" static="no" mutable="no">
        <type>MWList&lt; <ref refid="classMWTask" kindref="compound">MWTask</ref> &gt; *</type>
        <definition>MWList&lt;MWTask&gt;* MWDriver::todo</definition>
        <argsstring></argsstring>
        <name>todo</name>
        <briefdescription>
<para>The head of the list of tasks to do. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="857" column="1" bodyfile="src/MWDriver.h" bodystart="857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1afc2283ab29203cbbbcfae8e8b1230860" prot="private" static="no" mutable="no">
        <type>MWList&lt; <ref refid="classMWTask" kindref="compound">MWTask</ref> &gt; *</type>
        <definition>MWList&lt;MWTask&gt;* MWDriver::running</definition>
        <argsstring></argsstring>
        <name>running</name>
        <briefdescription>
<para>The head of the list of tasks that are actually running. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="867" column="1" bodyfile="src/MWDriver.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1aaa15a586a025baec75b96e8c5d2bc1c7" prot="private" static="no" mutable="no">
        <type>MWList&lt; int &gt; *</type>
        <definition>MWList&lt;int&gt;* MWDriver::reassigned_tasks</definition>
        <argsstring></argsstring>
        <name>reassigned_tasks</name>
        <briefdescription>
<para>The reassigned task list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="870" column="1" bodyfile="src/MWDriver.h" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1acef4435ca5f3846293628ef02999775f" prot="private" static="no" mutable="no">
        <type>MWList&lt; int &gt; *</type>
        <definition>MWList&lt;int&gt;* MWDriver::reassigned_tasks_done</definition>
        <argsstring></argsstring>
        <name>reassigned_tasks_done</name>
        <briefdescription>
<para>The reassigned and done task list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="872" column="1" bodyfile="src/MWDriver.h" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a7d98da7c9981a4edbeb9427b3bd029cd" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool MWDriver::normal_tasks_all_done</definition>
        <argsstring></argsstring>
        <name>normal_tasks_all_done</name>
        <briefdescription>
<para>All running tasks are reassigned_done. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="874" column="1" bodyfile="src/MWDriver.h" bodystart="874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" prot="protected" static="no" mutable="no">
        <type>MWKey(*</type>
        <definition>MWKey(* MWDriver::task_key) (MWTask *)</definition>
        <argsstring>)(MWTask *)</argsstring>
        <name>task_key</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A pointer to a (user written) function that takes an <ref refid="classMWTask" kindref="compound">MWTask</ref> and returns the &quot;key&quot; for this task. The user is allowed to change the &quot;key&quot; by simply changing the function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="827" column="1" bodyfile="src/MWDriver.h" bodystart="827" bodyend="-1"/>
        <referencedby refid="classMWDriver_1a0dfb4201b9bce44ba2a59019f7fc2dd2" compoundref="MWDriver_8C" startline="3389" endline="3406">addSortedTasks</referencedby>
        <referencedby refid="classMWDriver_1ae4c5921926e8780642d1b7dacf1a7016" compoundref="MWDriver_8C" startline="2178" endline="2205">delete_tasks_worse_than</referencedby>
        <referencedby refid="classMWDriver_1a0e1ef56017457e099e5947e81dd5d761" compoundref="MWDriver_8C" startline="1386" endline="1415">handle_hostresume</referencedby>
        <referencedby refid="classMWDriver_1a5e0110a01075a9dfd3e93053b22f9ef0" compoundref="MWDriver_8C" startline="79" endline="169">MWDriver</referencedby>
        <referencedby refid="classMWDriver_1a8d2aea2804ff2f999ea206a3ee0f096a" compoundref="MWDriver_8C" startline="2147" endline="2175">print_task_keys</referencedby>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
        <referencedby refid="classMWDriver_1a0579cc034d3c83ea68ab456d222b8b79" compoundref="MWDriver_8C" startline="2561" endline="2588">return_best_running_keyval</referencedby>
        <referencedby refid="classMWDriver_1add3bc92ab03d051502e69ca03de4928f" compoundref="MWDriver_8C" startline="2525" endline="2559">return_best_todo_keyval</referencedby>
        <referencedby refid="classMWDriver_1abe90c9016afecc9bf9b68d4b9f3ba3b7" compoundref="MWDriver_8C" startline="1913" endline="1922">set_task_key_function</referencedby>
        <referencedby refid="classMWDriver_1a5d413e43dbd55fdc211f0aebdd51ac47" compoundref="MWDriver_8C" startline="1940" endline="1958">set_task_retrieve_mode</referencedby>
        <referencedby refid="classMWDriver_1a69e6f72bc04a6c68046a41bc4292bf64" compoundref="MWDriver_8C" startline="3306" endline="3325">sort_task_list</referencedby>
        <referencedby refid="classMWDriver_1aaa70ab2dd6087ef2415824f770747f8f" compoundref="MWDriver_8C" startline="3187" endline="3291">swap_in_todo_tasks</referencedby>
        <referencedby refid="classMWDriver_1afa05516157b292a420ba6770fd2f493c" compoundref="MWDriver_8C" startline="2956" endline="3184">swap_out_todo_tasks</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aded3f8d1e5aa80a2492387533195d0aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        <definition>MWTask * MWDriver::get_todo_head</definition>
        <argsstring>()</argsstring>
        <name>get_todo_head</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is Jeff&apos;s nasty addition so that he can get access to the tasks on the master </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="862" column="1" bodyfile="src/MWDriver.C" bodystart="3497" bodyend="3502"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a5de7c64341a08fd5badd62451c0c24dd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::give_work</definition>
        <argsstring>(MWWorkerID *w, MWTask *t)</argsstring>
        <name>give_work</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="829" column="1" bodyfile="src/MWDriver.C" bodystart="931" bodyend="940"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aaf7f2b1c02f77e5886f91e24044bb027" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::pushTask</definition>
        <argsstring>(MWTask *)</argsstring>
        <name>pushTask</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <defname>push_task</defname>
        </param>
        <briefdescription>
<para>This puts a (generally failed) task at the beginning of the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="798" column="1" bodyfile="src/MWDriver.C" bodystart="1830" bodyend="1870"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aca5a713d48cf0a882c76b02bdac804d7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        <definition>MWTask * MWDriver::getNextTask</definition>
        <argsstring>(MWGroup *grp)</argsstring>
        <name>getNextTask</name>
        <param>
          <type>MWGroup *</type>
          <declname>grp</declname>
        </param>
        <briefdescription>
<para>Get a Task. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="801" column="1" bodyfile="src/MWDriver.C" bodystart="1743" bodyend="1810"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aeef0b37492a7c540511ef274c7624f7f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::putOnRunQ</definition>
        <argsstring>(MWTask *t)</argsstring>
        <name>putOnRunQ</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>This puts a task at the end of the running list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="804" column="1" bodyfile="src/MWDriver.C" bodystart="2208" bodyend="2215"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ad201c101b05e8d1eb6a6a15e8da2b717" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        <definition>MWTask * MWDriver::rmFromRunQ</definition>
        <argsstring>(int jobnum)</argsstring>
        <name>rmFromRunQ</name>
        <param>
          <type>int</type>
          <declname>jobnum</declname>
        </param>
        <briefdescription>
<para>Removes a task from the queue of things to run. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="807" column="1" bodyfile="src/MWDriver.C" bodystart="2218" bodyend="2231"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a0b5211c316ce5b4c9d25614feaa1018e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::printRunQ</definition>
        <argsstring>()</argsstring>
        <name>printRunQ</name>
        <briefdescription>
<para>Print the tasks in the list of tasks to do. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="810" column="1" bodyfile="src/MWDriver.C" bodystart="2280" bodyend="2291"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a873640ae46d4631edb411f49d29f0a80" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::ckpt_addTask</definition>
        <argsstring>(MWTask *)</argsstring>
        <name>ckpt_addTask</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <defname>add_task</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add one task to the todo list; do NOT set the &apos;number&apos; of the task - useful in restarting from a checkpoint </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="814" column="1" bodyfile="src/MWDriver.C" bodystart="1907" bodyend="1910"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a2e1bafeb1ae28f682451ed256a8e8d41" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWWorkerID *</type>
        <definition>MWWorkerID * MWDriver::task_assigned</definition>
        <argsstring>(MWTask *t)</argsstring>
        <name>task_assigned</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>returns the worker this task is assigned to, NULL if none. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="817" column="1" bodyfile="src/MWDriver.C" bodystart="2234" bodyend="2246"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a28bffbc9d533d4c33f60b0dbc1c77133" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool MWDriver::task_in_todo_list</definition>
        <argsstring>(MWTask *t)</argsstring>
        <name>task_in_todo_list</name>
        <param>
          <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Returns true if &quot;t&quot; is still in the todo list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="820" column="1" bodyfile="src/MWDriver.C" bodystart="2249" bodyend="2267"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1af3d84fba0497cda35171c32ea4d778d8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::insert_into_set</definition>
        <argsstring>(MWList&lt; int &gt; *list, int tid)</argsstring>
        <name>insert_into_set</name>
        <param>
          <type>MWList&lt; int &gt; *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Insert a task with an id of tid into a int* list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="877" column="1" bodyfile="src/MWDriver.h" bodystart="877" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1abb189e0365cacc5abc08eec6acb368fc" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MWDriver::in_set</definition>
        <argsstring>(MWList&lt; int &gt; *list, int tid)</argsstring>
        <name>in_set</name>
        <param>
          <type>MWList&lt; int &gt; *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>See if a task is in a given int* list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="895" column="1" bodyfile="src/MWDriver.h" bodystart="895" bodyend="906"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Worker management methods</header>
      <description><para>These methods act on the list of workers (or specifically) ID&apos;s of workers, that the driver knows about. </para></description>
      <memberdef kind="variable" id="classMWDriver_1a293af433f8634444caaac0d94f66c401" prot="private" static="no" mutable="no">
        <type>MWList&lt; MWWorkerID &gt; *</type>
        <definition>MWList&lt;MWWorkerID&gt;* MWDriver::workers</definition>
        <argsstring></argsstring>
        <name>workers</name>
        <briefdescription>
<para>The head of the list of workers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="943" column="1" bodyfile="src/MWDriver.h" bodystart="943" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1adeac426d58dbd02b839bdb076d55e511" prot="private" static="no" mutable="no">
        <type>MWSuspensionPolicy</type>
        <definition>MWSuspensionPolicy MWDriver::suspensionPolicy</definition>
        <argsstring></argsstring>
        <name>suspensionPolicy</name>
        <briefdescription>
<para>Here&apos;s where we store what should happen on a suspension... </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="946" column="1" bodyfile="src/MWDriver.h" bodystart="946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a7cd3d2d9ba6a9e0e89511b6114a18632" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::printWorkers</definition>
        <argsstring>()</argsstring>
        <name>printWorkers</name>
        <briefdescription>
<para>Prints the available workers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="934" column="1" bodyfile="src/MWDriver.C" bodystart="2507" bodyend="2522"/>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a08d81fbcaa68a8fb4ec11afcd81abc1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWWorkerID *</type>
        <definition>MWWorkerID * MWDriver::get_workers_head</definition>
        <argsstring>()</argsstring>
        <name>get_workers_head</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Another terrible addition so that Jeff can print out the worker list in his own format </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="938" column="1" bodyfile="src/MWDriver.C" bodystart="3505" bodyend="3510"/>
        <references refid="classMWRMComm_1ac74cbe518e434e9796eba40687a3ec6b">MWRMComm::get_num_exec_classes</references>
        <references refid="classMWDriver_1a71ca10beb1bce49579a44a657ed1f7a8" compoundref="MWDriver_8C" startline="3334" endline="3337">get_number_running_tasks</references>
        <references refid="classMWDriver_1a91e7f38f78eba72bd69103a25730f9a9" compoundref="MWDriver_8C" startline="3329" endline="3332">get_number_tasks</references>
        <references refid="classMWRMComm_1a12c2add8bea8577d5d150c49c7d42e5d">MWRMComm::initsend</references>
        <references refid="classMWDriver_1a1b0cd5e8c9a5e7561886fb1b7a48a7d1" compoundref="MWDriver_8C" startline="2474" endline="2504">numWorkersInState</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1abfe166a1b1c70e35069fbc0f1beb250f">MWRMComm::send</references>
        <references refid="classMWRMComm_1a9723b0a13c493923e1282d7832b86b65">MWRMComm::set_target_num_workers</references>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ada183d37afd5f06bf96c3f716ca90075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::numWorkers</definition>
        <argsstring>()</argsstring>
        <name>numWorkers</name>
        <briefdescription>
<para>Counts the existing workers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="952" column="1" bodyfile="src/MWDriver.C" bodystart="2448" bodyend="2451"/>
        <referencedby refid="classMWDriver_1ae4c5921926e8780642d1b7dacf1a7016" compoundref="MWDriver_8C" startline="2178" endline="2205">delete_tasks_worse_than</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a4930b0cd40ef0940732ba0b5057c7f15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::numWorkers</definition>
        <argsstring>(int arch)</argsstring>
        <name>numWorkers</name>
        <param>
          <type>int</type>
          <declname>arch</declname>
        </param>
        <briefdescription>
<para>Counts the number of workers in the given arch class. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="955" column="1" bodyfile="src/MWDriver.C" bodystart="2454" bodyend="2470"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a1b0cd5e8c9a5e7561886fb1b7a48a7d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::numWorkersInState</definition>
        <argsstring>(int ThisState)</argsstring>
        <name>numWorkersInState</name>
        <param>
          <type>int</type>
          <declname>ThisState</declname>
        </param>
        <briefdescription>
<para>Counts the number of workers in the given state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="958" column="1" bodyfile="src/MWDriver.C" bodystart="2474" bodyend="2504"/>
        <referencedby refid="classMWDriver_1a08d81fbcaa68a8fb4ec11afcd81abc1b" compoundref="MWDriver_8C" startline="3505" endline="3510">get_workers_head</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1add3bc92ab03d051502e69ca03de4928f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWKey</type>
        <definition>MWKey MWDriver::return_best_todo_keyval</definition>
        <argsstring>(void)</argsstring>
        <name>return_best_todo_keyval</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the value (only) of the best key in the Todo list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="961" column="1" bodyfile="src/MWDriver.C" bodystart="2525" bodyend="2559"/>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a0579cc034d3c83ea68ab456d222b8b79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWKey</type>
        <definition>MWKey MWDriver::return_best_running_keyval</definition>
        <argsstring>(void)</argsstring>
        <name>return_best_running_keyval</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the best value (only) of the best key in the Running list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="964" column="1" bodyfile="src/MWDriver.C" bodystart="2561" bodyend="2588"/>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
        <references refid="classMWTask_1a3899784f624c803ae211ab781f180ca3" compoundref="MWTask_8h" startline="70">MWTask::taskType</references>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ac82ded464bfebc95b038bdeeda7eb171" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::addWorker</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>addWorker</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
<para>Adds a worker to the list of avaiable workers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="920" column="1" bodyfile="src/MWDriver.C" bodystart="2294" bodyend="2309"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a15dd79bdfc2454120a233a1fb48654e7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWWorkerID *</type>
        <definition>MWWorkerID * MWDriver::lookupWorker</definition>
        <argsstring>(int tid)</argsstring>
        <name>lookupWorker</name>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Looks up information about a worker given its task ID. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="923" column="1" bodyfile="src/MWDriver.C" bodystart="2334" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ab96e1b3efbc2fbbcf82129d4d0f6b6b4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWWorkerID *</type>
        <definition>MWWorkerID * MWDriver::rmWorker</definition>
        <argsstring>(int tid)</argsstring>
        <name>rmWorker</name>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Removes a worker from the list of available workers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="926" column="1" bodyfile="src/MWDriver.C" bodystart="2593" bodyend="2608"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ac0c7ed309547cf1bf166603bc07787ac" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::worker_last_rites</definition>
        <argsstring>(MWWorkerID *w)</argsstring>
        <name>worker_last_rites</name>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function removes worker from the list, removes it and deletes the structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="930" column="1" bodyfile="src/MWDriver.C" bodystart="791" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a7be3d5224b22111a8278a26f3b0a6fa8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::sort_worker_list</definition>
        <argsstring>()</argsstring>
        <name>sort_worker_list</name>
        <briefdescription>
<para>Based on the ordering policy, place w in the worker list appropriately. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="949" column="1" bodyfile="src/MWDriver.C" bodystart="2317" bodyend="2331"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Checkpoint internal helpers...</header>
      <memberdef kind="variable" id="classMWDriver_1af23ef4d932fd84825d1dcf7e9b37b059" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::checkpoint_frequency</definition>
        <argsstring></argsstring>
        <name>checkpoint_frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How often to checkpoint? Task frequency based. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="974" column="1" bodyfile="src/MWDriver.h" bodystart="974" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a77e4ea598e586cb9274ee29d4d1244da" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::checkpoint_time_freq</definition>
        <argsstring></argsstring>
        <name>checkpoint_time_freq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How often to checkpoint? Time based. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="977" column="1" bodyfile="src/MWDriver.h" bodystart="977" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1ae4eecd7ae0073b68372d079e78c210ca" prot="private" static="no" mutable="no">
        <type>long</type>
        <definition>long MWDriver::next_ckpt_time</definition>
        <argsstring></argsstring>
        <name>next_ckpt_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Time to do next checkpoint...valid when using time-based checkpointing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="981" column="1" bodyfile="src/MWDriver.h" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a25963400a7262bc2d75706b4bf96c453" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::num_completed_tasks</definition>
        <argsstring></argsstring>
        <name>num_completed_tasks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of tasks acted upon up to now. Used with checkpoint_frequency </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="985" column="1" bodyfile="src/MWDriver.h" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a5860c1e1b01ff0ce40cd1203b7e42894" prot="private" static="no" mutable="no">
        <type><ref refid="classMWTask" kindref="compound">MWTask</ref> *</type>
        <definition>MWTask* MWDriver::bench_task</definition>
        <argsstring></argsstring>
        <name>bench_task</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The benchmark task. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="988" column="1" bodyfile="src/MWDriver.h" bodystart="988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a9fd4b172d36f0496303a0e9d9c33f615" prot="private" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* MWDriver::ckpt_filename</definition>
        <argsstring></argsstring>
        <name>ckpt_filename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The name of the checkpoint file </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="991" column="1" bodyfile="src/MWDriver.h" bodystart="991" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classMWDriver_1a7f5e4f492b6cae4d6ac5f83e48b79300" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class MWTask</definition>
        <argsstring></argsstring>
        <name>MWTask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="159" column="1" bodyfile="src/MWDriver.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" prot="public" static="yes" mutable="no">
        <type><ref refid="classMWRMComm" kindref="compound">MWRMComm</ref> *</type>
        <definition>MWRMComm* MWDriver::RMC</definition>
        <argsstring></argsstring>
        <name>RMC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A static instance of our Resource Management / Communication class. It&apos;s a member of this class because that way derived classes can use it easily; it&apos;s static because there should only be one instance EVER. The instance of RMC in the <ref refid="classMWTask" kindref="compound">MWTask</ref> class is actually a pointer to this one... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="193" column="1" bodyfile="src/MWDriver.h" bodystart="193" bodyend="-1"/>
        <referencedby refid="classMWDriver_1a0dfb4201b9bce44ba2a59019f7fc2dd2" compoundref="MWDriver_8C" startline="3389" endline="3406">addSortedTasks</referencedby>
        <referencedby refid="classMWDriver_1a8b8a9ff2699780ce52ae600b658c9e4f" compoundref="MWDriver_8C" startline="1873" endline="1892">addTasks</referencedby>
        <referencedby refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" compoundref="MWDriver_8C" startline="2646" endline="2755">checkpoint</referencedby>
        <referencedby refid="classMWDriver_1ae4c5921926e8780642d1b7dacf1a7016" compoundref="MWDriver_8C" startline="2178" endline="2205">delete_tasks_worse_than</referencedby>
        <referencedby refid="classMWDriver_1a08d81fbcaa68a8fb4ec11afcd81abc1b" compoundref="MWDriver_8C" startline="3505" endline="3510">get_workers_head</referencedby>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
        <referencedby refid="classMWDriver_1a73290f6fab539708112ec28a9e49b563" compoundref="MWDriver_8C" startline="873" endline="902">handle_benchmark</referencedby>
        <referencedby refid="classMWDriver_1a7b1d0f044688941bd9a0e502b48c4676" compoundref="MWDriver_8C" startline="1191" endline="1275">handle_checksum</referencedby>
        <referencedby refid="classMWDriver_1af6c437b207bd8d327ceb84c5ce0c4304" compoundref="MWDriver_8C" startline="1129" endline="1154">handle_hostdel</referencedby>
        <referencedby refid="classMWDriver_1a0e1ef56017457e099e5947e81dd5d761" compoundref="MWDriver_8C" startline="1386" endline="1415">handle_hostresume</referencedby>
        <referencedby refid="classMWDriver_1a91c21e0a4aba8ce4e03ebf7c3064f6b5" compoundref="MWDriver_8C" startline="1278" endline="1357">handle_hostsuspend</referencedby>
        <referencedby refid="classMWDriver_1ab4ee1fc1cbc9f5e07e3083f499d29be0" compoundref="MWDriver_8C" startline="1157" endline="1182">handle_taskexit</referencedby>
        <referencedby refid="classMWDriver_1a147074c64c2bf0883077a28432816947" compoundref="MWDriver_8C" startline="730" endline="735">printresults</referencedby>
        <referencedby refid="classMWDriver_1a9dc5f80c5069e9bddcfee2ad9e5e32e4" compoundref="MWDriver_8C" startline="738" endline="788">refreshWorkers</referencedby>
        <referencedby refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</referencedby>
        <referencedby refid="classMWDriver_1a62ee843c55a50415b8c96c552267bd48" compoundref="MWDriver_8C" startline="719" endline="727">stop_work</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classMWDriver_1acadeb08c412966919ab0627fda6aecb0" prot="private" static="no" mutable="no">
        <type>MWStatistics *</type>
        <definition>MWStatistics* MWDriver::stats</definition>
        <argsstring></argsstring>
        <name>stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When submitting multiple jobs from the same directory, the checkpoint files all the the same name if we use the fixed ckpt_filename. So we made some changes: (1) Allow the user set their checkpoint file name by calling set_ckpt_filename(const char*) before finishing get_user_info() (2) If the user doesn&apos;t specify the ckpt_filename, then use -ckpt. (3) When reading checkpoints during execution, MW will just read the file. When the application restarts, it will find the file with the same name as user specified, or as the default name (choose the first one when there are multiple files). The instance of the stats class that takes workers and later prints out relevant stats... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1011" column="1" bodyfile="src/MWDriver.h" bodystart="1011" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1aa45f6d669398eb60b89a802a96c887d2" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char MWDriver::mach_name[64]</definition>
        <argsstring>[64]</argsstring>
        <name>mach_name</name>
        <briefdescription>
<para>The name of the machine the worker is running on. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1153" column="1" bodyfile="src/MWDriver.h" bodystart="1153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a19bc1f2a3b2e2b346ab4b48b508d2e59" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double MWDriver::defaultTimeInterval</definition>
        <argsstring></argsstring>
        <name>defaultTimeInterval</name>
        <briefdescription>
<para>for measuring network connectivity </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1156" column="1" bodyfile="src/MWDriver.h" bodystart="1156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1ab0044dfad22b4226ef86ae294e0c25b9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::defaultIterations</definition>
        <argsstring></argsstring>
        <name>defaultIterations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1157" column="1" bodyfile="src/MWDriver.h" bodystart="1157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMWDriver_1a6af54c97a4c8d2f02f720c782291de26" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int MWDriver::defaultPortNo</definition>
        <argsstring></argsstring>
        <name>defaultPortNo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1158" column="1" bodyfile="src/MWDriver.h" bodystart="1158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classMWDriver_1a5e0110a01075a9dfd3e93053b22f9ef0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>MWDriver::MWDriver</definition>
        <argsstring>()</argsstring>
        <name>MWDriver</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="164" column="1" bodyfile="src/MWDriver.C" bodystart="79" bodyend="169"/>
        <references refid="classMWDriver_1a033da9ddab14c10d0c174ee778234221" compoundref="MWDriver_8h" startline="586">MIN_IN_MEM</references>
        <references refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" compoundref="MWDriver_8h" startline="827">task_key</references>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a05b1dac7d50ff571c480ff386e6fcb30" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>MWDriver::~MWDriver</definition>
        <argsstring>()</argsstring>
        <name>~MWDriver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destructor - walks through lists of tasks &amp; workers and deletes them. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="168" column="1" bodyfile="src/MWDriver.C" bodystart="172" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::go</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>go</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method runs the entire fault-tolerant application in the condor environment. What is <emphasis>really</emphasis> does is call setup_master(), then master(), then <ref refid="classMWDriver_1a147074c64c2bf0883077a28432816947" kindref="member">printresults()</ref>, and then ends. See the other functions for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="175" column="1" bodyfile="src/MWDriver.C" bodystart="203" bodyend="246"/>
        <references refid="classMWDriver_1aeb92065d166911049bec838253554555" compoundref="MWDriver_8h" startline="305" endline="305">act_on_completed_subtask</references>
        <references refid="classMWDriver_1a8b8a9ff2699780ce52ae600b658c9e4f" compoundref="MWDriver_8C" startline="1873" endline="1892">addTasks</references>
        <references refid="classMWRMComm_1a7670401dc33950de354e41183dd392cd">MWRMComm::bufinfo</references>
        <references refid="classMWRMComm_1ab4ce8dae654516f77d20fc912da3e188">MWRMComm::exit</references>
        <references refid="classMWDriver_1acf0edc86b06b46968114c8bb770791b2">get_userinfo</references>
        <references refid="classMWDriver_1a73290f6fab539708112ec28a9e49b563" compoundref="MWDriver_8C" startline="873" endline="902">handle_benchmark</references>
        <references refid="classMWDriver_1a7b1d0f044688941bd9a0e502b48c4676" compoundref="MWDriver_8C" startline="1191" endline="1275">handle_checksum</references>
        <references refid="classMWDriver_1af6c437b207bd8d327ceb84c5ce0c4304" compoundref="MWDriver_8C" startline="1129" endline="1154">handle_hostdel</references>
        <references refid="classMWDriver_1a0e1ef56017457e099e5947e81dd5d761" compoundref="MWDriver_8C" startline="1386" endline="1415">handle_hostresume</references>
        <references refid="classMWDriver_1a91c21e0a4aba8ce4e03ebf7c3064f6b5" compoundref="MWDriver_8C" startline="1278" endline="1357">handle_hostsuspend</references>
        <references refid="classMWDriver_1ab4ee1fc1cbc9f5e07e3083f499d29be0" compoundref="MWDriver_8C" startline="1157" endline="1182">handle_taskexit</references>
        <references refid="classMWRMComm_1a50088a80976b2aee031e987393bceeb2">MWRMComm::init_beginning_workers</references>
        <references refid="classMWRMComm_1a12c2add8bea8577d5d150c49c7d42e5d">MWRMComm::initsend</references>
        <references refid="classMWDriver_1a184d950e15be4aa0ecb22d7eaea622fe" compoundref="MWDriver_8C" startline="3294" endline="3303">is_TODO_empty</references>
        <references refid="classMWDriver_1a147074c64c2bf0883077a28432816947" compoundref="MWDriver_8C" startline="730" endline="735">printresults</references>
        <references refid="classMWDriver_1a7cd3d2d9ba6a9e0e89511b6114a18632" compoundref="MWDriver_8C" startline="2507" endline="2522">printWorkers</references>
        <references refid="classMWRMComm_1a9f10630a68baee310e48d0df33fb2dd8">MWRMComm::recv</references>
        <references refid="classMWRMComm_1a831a7994d307d075f877b4415cb65657">MWRMComm::restart_beginning_workers</references>
        <references refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" compoundref="MWDriver_8C" startline="2758" endline="2906">restart_from_ckpt</references>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <references refid="classMWRMComm_1abfe166a1b1c70e35069fbc0f1beb250f">MWRMComm::send</references>
        <references refid="classMWRMComm_1a6c500b03f49fbab5a879dfec1f8c492e">MWRMComm::setup</references>
        <references refid="classMWDriver_1a618bdbf6e481a903455e068ba37ba0fa">setup_initial_tasks</references>
        <references refid="classMWRMComm_1a0064a409542e4308c77eb598b161138e">MWRMComm::start_worker</references>
        <references refid="classMWRMComm_1af5fe22ee99ecbb178dad85b6474fe61f">MWRMComm::unpack</references>
        <references refid="classMWDriver_1a49177e47b2d394aff1bc952e98bb7e19" compoundref="MWDriver_8C" startline="3340" endline="3356">workClasses_set</references>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a4d3d2d8a2fac34f02c0573fabb29f1cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::go</definition>
        <argsstring>()</argsstring>
        <name>go</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This version of go simply calls go(0, NULL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="178" column="1" bodyfile="src/MWDriver.h" bodystart="178" bodyend="178"/>
        <references refid="classMWDriver_1a4d3d2d8a2fac34f02c0573fabb29f1cf" compoundref="MWDriver_8h" startline="178" endline="178">go</references>
        <references refid="classMWDriver_1a147074c64c2bf0883077a28432816947" compoundref="MWDriver_8C" startline="730" endline="735">printresults</references>
        <referencedby refid="classMWDriver_1a4d3d2d8a2fac34f02c0573fabb29f1cf" compoundref="MWDriver_8h" startline="178" endline="178">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a147074c64c2bf0883077a28432816947" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void MWDriver::printresults</definition>
        <argsstring>()</argsstring>
        <name>printresults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prints the Results. Applications may re-implement this to print their application specific results. It is meant to be over-ridden. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="185" column="1" bodyfile="src/MWDriver.C" bodystart="730" bodyend="735"/>
        <references refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" compoundref="MWDriver_8h" startline="193">RMC</references>
        <referencedby refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" compoundref="MWDriver_8C" startline="203" endline="246">go</referencedby>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aca4f177690775ecc72820c67a88e66f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::reassignSuspendedTask</definition>
        <argsstring>(MWList&lt; MWTask &gt; *running, MWWorkerID *w)</argsstring>
        <name>reassignSuspendedTask</name>
        <param>
          <type>MWList&lt; <ref refid="classMWTask" kindref="compound">MWTask</ref> &gt; *</type>
          <declname>running</declname>
        </param>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="383" column="1" bodyfile="src/MWDriver.C" bodystart="1101" bodyend="1126"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a667ad4ad0017cd362835e7a89b43f061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::reassignIdleTask</definition>
        <argsstring>(MWList&lt; MWWorkerID &gt; *workers, MWWorkerID *w)</argsstring>
        <name>reassignIdleTask</name>
        <param>
          <type>MWList&lt; MWWorkerID &gt; *</type>
          <declname>workers</declname>
        </param>
        <param>
          <type>MWWorkerID *</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="384" column="1" bodyfile="src/MWDriver.C" bodystart="1360" bodyend="1383"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1aa7209348f0f9682935e191af9eb834b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::matchTask</definition>
        <argsstring>(void *arg1, void *arg2)</argsstring>
        <name>matchTask</name>
        <param>
          <type>void *</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="385" column="1" bodyfile="src/MWDriver.C" bodystart="2270" bodyend="2277"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ae1a927f51c31e6f31998965770b06c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MWWorkerID *</type>
        <definition>MWWorkerID* MWDriver::numberworker</definition>
        <argsstring>(void *arg1, void *arg2)</argsstring>
        <name>numberworker</name>
        <param>
          <type>void *</type>
          <declname>arg1</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>arg2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="386" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1afc9ed3676db0cc2ac5f5941beb15f1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MWDriver::prepare_update</definition>
        <argsstring>(int mode)</argsstring>
        <name>prepare_update</name>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1237" column="1" bodyfile="src/MWDriver.C" bodystart="4338" bodyend="4366"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a8ac25d9fc7e9505bc14490d317c7560d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void MWDriver::pack_update</definition>
        <argsstring>()</argsstring>
        <name>pack_update</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1240" column="1" bodyfile="src/MWDriver.h" bodystart="1240" bodyend="1240"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a3a101f4b453675e7408ad9f3869a9804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::send_update_message</definition>
        <argsstring>()</argsstring>
        <name>send_update_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1244" column="1" bodyfile="src/MWDriver.C" bodystart="4371" bodyend="4377"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1ae13919ea92ecde1abc954db7ad0935d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int MWDriver::send_update_message_to</definition>
        <argsstring>(int worker)</argsstring>
        <name>send_update_message_to</name>
        <param>
          <type>int</type>
          <declname>worker</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1247" column="1" bodyfile="src/MWDriver.C" bodystart="4382" bodyend="4385"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classMWDriver_1a9cc261a89713b78287af952cf4813e37" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double MWDriver::get_instant_pool_perf</definition>
        <argsstring>()</argsstring>
        <name>get_instant_pool_perf</name>
        <briefdescription>
<para>This returns the sum of the bench results for the currently working machines. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1015" column="1" bodyfile="src/MWDriver.C" bodystart="3477" bodyend="3494"/>
      </memberdef>
      <memberdef kind="function" id="classMWDriver_1a3c07a1c5d9a201b20cc14a21dc8f9679" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * MWDriver::getHostName</definition>
        <argsstring>()</argsstring>
        <name>getHostName</name>
        <briefdescription>
<para>This returns the hostname. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/MWDriver.h" line="1018" column="1" bodyfile="src/MWDriver.C" bodystart="4077" bodyend="4081"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class is responsible for managing an application in an opportunistic environment. The goal is to be completely fault - tolerant, dealing with all possiblities of host (worker) problems. To do this, the <ref refid="classMWDriver" kindref="compound">MWDriver</ref> class manages a set of tasks and a set of workers. It monitors messages about hosts coming up and going down, and assigns tasks appropriately. <verbatim>This class is built upon some sort of resource management and 
message passing lower layer.  Previously, it was built directly 
on top of Condor - PVM, but the interface to that has been 
abstracted away so that it can use any facility that provides 
for resource management and message passing.  See the abstract
MWRMComm class for details of this lower layer.  When interfacing
with this level, you&apos;ll have use the RMC object that&apos;s a static
member of the MWDriver, MWTask, and MWWorker class.  
</verbatim></para><para>To implement an application, a user must derive a class from this base class and implement the following methods:</para><para><itemizedlist>
<listitem><para><ref refid="classMWDriver_1acf0edc86b06b46968114c8bb770791b2" kindref="member">get_userinfo()</ref></para></listitem><listitem><para><ref refid="classMWDriver_1a618bdbf6e481a903455e068ba37ba0fa" kindref="member">setup_initial_tasks()</ref></para></listitem><listitem><para><ref refid="classMWDriver_1a6a142fda8b58806b1769558afd17c85c" kindref="member">pack_worker_init_data()</ref></para></listitem><listitem><para><ref refid="classMWDriver_1a920118e3f49ab81db5047d9ecdbcea2b" kindref="member">act_on_completed_task()</ref></para></listitem></itemizedlist>
</para><para><verbatim>For a higher level of control regarding distribution of tasks to workers, 
tasks and workers may be enrolled to workclasses/groups by calling the
following methods:

- MWWorkerID::addGroup()
- MWWorkerID::deleteGroup()
- MWTask::addGroup()
- MWTask::deleteGroup()

These methods can be called by an application using workclasses:

- workClasses_set()  (Required)
- workClasses_get()
- workClasses_gettasks()
- workClasses_getworkers()

To enroll workers in workclasses, there are two options:
- act_on_starting_worker() can be implemented to enroll workers to 
workclasses based on MWWorkerID info at the start of execution
- pack_worker_init_data() can be implemented to enroll workers. When used 
in conjunction with refreshWorkers(), can change workclass of workers in the        middle of execution.    
</verbatim></para><para>Similar application dependent methods must be implemented for the &quot;Task&quot; of work to be done and the &quot;Worker&quot; who performs the tasks.</para><para><simplesect kind="see"><para><ref refid="classMWTask" kindref="compound">MWTask</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classMWWorker" kindref="compound">MWWorker</ref> </para></simplesect>
<simplesect kind="see"><para><ref refid="classMWRMComm" kindref="compound">MWRMComm</ref> </para></simplesect>
<simplesect kind="author"><para>Mike Yoder, Jeff Linderoth, Jean-Pierre Goux, Sanjeev Kulkarni </para></simplesect>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>MWRMComm</label>
        <link refid="classMWRMComm"/>
        <childnode refid="3" relation="usage">
          <edgelabel>worker_executables</edgelabel>
        </childnode>
      </node>
      <node id="3">
        <label>RMC_executable</label>
        <link refid="structRMC__executable"/>
      </node>
      <node id="1">
        <label>MWDriver</label>
        <link refid="classMWDriver"/>
        <childnode refid="2" relation="usage">
          <edgelabel>RMC</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/MWDriver.h" line="157" column="1" bodyfile="src/MWDriver.h" bodystart="157" bodyend="1248"/>
    <listofallmembers>
      <member refid="classMWDriver_1aeb92065d166911049bec838253554555" prot="protected" virt="virtual"><scope>MWDriver</scope><name>act_on_completed_subtask</name></member>
      <member refid="classMWDriver_1a920118e3f49ab81db5047d9ecdbcea2b" prot="protected" virt="pure-virtual"><scope>MWDriver</scope><name>act_on_completed_task</name></member>
      <member refid="classMWDriver_1a8199945d5f7c89bde67962da6d0c7ffe" prot="protected" virt="virtual"><scope>MWDriver</scope><name>act_on_starting_worker</name></member>
      <member refid="classMWDriver_1a63d3de5053ac938a14953fbae46e0e88" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>addmode</name></member>
      <member refid="classMWDriver_1a0dfb4201b9bce44ba2a59019f7fc2dd2" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>addSortedTasks</name></member>
      <member refid="classMWDriver_1aa044c3810502c18efcb32dc77a66a138" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>addTask</name></member>
      <member refid="classMWDriver_1ab2a3c48dca3e1b2cd6db093d5a31b8eb" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>addTaskByKey</name></member>
      <member refid="classMWDriver_1a8b8a9ff2699780ce52ae600b658c9e4f" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>addTasks</name></member>
      <member refid="classMWDriver_1ac82ded464bfebc95b038bdeeda7eb171" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>addWorker</name></member>
      <member refid="classMWDriver_1a5860c1e1b01ff0ce40cd1203b7e42894" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>bench_task</name></member>
      <member refid="classMWDriver_1a51286850643bc27d17eb2bafe05845f3" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>call_hostaddlogic</name></member>
      <member refid="classMWDriver_1ad41bdc32bc2f56f7816810bc4d260db2" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>checkpoint</name></member>
      <member refid="classMWDriver_1af23ef4d932fd84825d1dcf7e9b37b059" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>checkpoint_frequency</name></member>
      <member refid="classMWDriver_1a77e4ea598e586cb9274ee29d4d1244da" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>checkpoint_time_freq</name></member>
      <member refid="classMWDriver_1a873640ae46d4631edb411f49d29f0a80" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>ckpt_addTask</name></member>
      <member refid="classMWDriver_1a9fd4b172d36f0496303a0e9d9c33f615" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>ckpt_filename</name></member>
      <member refid="classMWDriver_1a54dd5ee89c012ec1f34889194c10af07" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>ControlPanel</name></member>
      <member refid="classMWDriver_1a8f2a93a66bc9a373e043d4244d2af995" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>create_initial_tasks</name></member>
      <member refid="classMWDriver_1ab0044dfad22b4226ef86ae294e0c25b9" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>defaultIterations</name></member>
      <member refid="classMWDriver_1a6af54c97a4c8d2f02f720c782291de26" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>defaultPortNo</name></member>
      <member refid="classMWDriver_1a19bc1f2a3b2e2b346ab4b48b508d2e59" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>defaultTimeInterval</name></member>
      <member refid="classMWDriver_1ae4c5921926e8780642d1b7dacf1a7016" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>delete_tasks_worse_than</name></member>
      <member refid="classMWDriver_1a77e388c0446e7c42a8c6d0ee544a29b6" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>get_benchmark_task</name></member>
      <member refid="classMWDriver_1a9cc261a89713b78287af952cf4813e37" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>get_instant_pool_perf</name></member>
      <member refid="classMWDriver_1a71ca10beb1bce49579a44a657ed1f7a8" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>get_number_running_tasks</name></member>
      <member refid="classMWDriver_1a91e7f38f78eba72bd69103a25730f9a9" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>get_number_tasks</name></member>
      <member refid="classMWDriver_1aded3f8d1e5aa80a2492387533195d0aa" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>get_todo_head</name></member>
      <member refid="classMWDriver_1acf0edc86b06b46968114c8bb770791b2" prot="protected" virt="pure-virtual"><scope>MWDriver</scope><name>get_userinfo</name></member>
      <member refid="classMWDriver_1a08d81fbcaa68a8fb4ec11afcd81abc1b" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>get_workers_head</name></member>
      <member refid="classMWDriver_1a3c07a1c5d9a201b20cc14a21dc8f9679" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>getHostName</name></member>
      <member refid="classMWDriver_1ad8c2af387c3857b0ed7ecef6e51dff2e" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>getmode</name></member>
      <member refid="classMWDriver_1aca5a713d48cf0a882c76b02bdac804d7" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>getNextTask</name></member>
      <member refid="classMWDriver_1a54e42db5bff6f63d6a0dc4886a293a2e" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>getNumWorkers</name></member>
      <member refid="classMWDriver_1a7d37eab370800bcc1fed37bff6c92643" prot="public" virt="pure-virtual"><scope>MWDriver</scope><name>gimme_a_task</name></member>
      <member refid="classMWDriver_1a5de7c64341a08fd5badd62451c0c24dd" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>give_work</name></member>
      <member refid="classMWDriver_1a7e9140329e1c6a2b4b7f1a0a9a365cab" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>go</name></member>
      <member refid="classMWDriver_1a4d3d2d8a2fac34f02c0573fabb29f1cf" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>go</name></member>
      <member refid="classMWDriver_1a73290f6fab539708112ec28a9e49b563" prot="public" virt="virtual"><scope>MWDriver</scope><name>handle_benchmark</name></member>
      <member refid="classMWDriver_1a7b1d0f044688941bd9a0e502b48c4676" prot="public" virt="virtual"><scope>MWDriver</scope><name>handle_checksum</name></member>
      <member refid="classMWDriver_1af6c437b207bd8d327ceb84c5ce0c4304" prot="public" virt="virtual"><scope>MWDriver</scope><name>handle_hostdel</name></member>
      <member refid="classMWDriver_1a0e1ef56017457e099e5947e81dd5d761" prot="public" virt="virtual"><scope>MWDriver</scope><name>handle_hostresume</name></member>
      <member refid="classMWDriver_1a91c21e0a4aba8ce4e03ebf7c3064f6b5" prot="public" virt="virtual"><scope>MWDriver</scope><name>handle_hostsuspend</name></member>
      <member refid="classMWDriver_1ab4ee1fc1cbc9f5e07e3083f499d29be0" prot="public" virt="virtual"><scope>MWDriver</scope><name>handle_taskexit</name></member>
      <member refid="classMWDriver_1a386f02d1b37ceea2b3ff1a2cbf8e44fb" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>handle_worker_results</name></member>
      <member refid="classMWDriver_1a5d6cd75e67e0ada97bb12c7239a7661f" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>has_task_swapped</name></member>
      <member refid="classMWDriver_1a702f660876d845b64e31d219219e88ab" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>hostPostmortem</name></member>
      <member refid="classMWDriver_1abb189e0365cacc5abc08eec6acb368fc" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>in_set</name></member>
      <member refid="classMWDriver_1af3d84fba0497cda35171c32ea4d778d8" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>insert_into_set</name></member>
      <member refid="classMWDriver_1a184d950e15be4aa0ecb22d7eaea622fe" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>is_TODO_empty</name></member>
      <member refid="classMWDriver_1a2cc000c8e2117d184386516fb3447d5f" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>kill_workers</name></member>
      <member refid="classMWDriver_1a36dca1456b0cba5c13c93c0eb464ab4e" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>listsorted</name></member>
      <member refid="classMWDriver_1a15dd79bdfc2454120a233a1fb48654e7" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>lookupWorker</name></member>
      <member refid="classMWDriver_1aa45f6d669398eb60b89a802a96c887d2" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>mach_name</name></member>
      <member refid="classMWDriver_1adfb10771b5b5521f2935bd781b9d70fb" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>machine_ordering_policy</name></member>
      <member refid="classMWDriver_1a88b1c9ad22443557f0dcbd62c45d436d" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>master_mainloop</name></member>
      <member refid="classMWDriver_1a4e010a2f5fcccfe96710e35304ec3781" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>master_mainloop_oneshot</name></member>
      <member refid="classMWDriver_1a9efd68e2a40dd021b82357a2e3fdea2d" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>master_setup</name></member>
      <member refid="classMWDriver_1aa7209348f0f9682935e191af9eb834b7" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>matchTask</name></member>
      <member refid="classMWDriver_1af1534851c44c7bddddac325f7ab490e8" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>MAX_IN_MEM</name></member>
      <member refid="classMWDriver_1a3e403584528d3ede889f7d8f1db2cbf1" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>max_task_key</name></member>
      <member refid="classMWDriver_1a033da9ddab14c10d0c174ee778234221" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>MIN_IN_MEM</name></member>
      <member refid="classMWDriver_1a5e0110a01075a9dfd3e93053b22f9ef0" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>MWDriver</name></member>
      <member refid="classMWDriver_1a7f5e4f492b6cae4d6ac5f83e48b79300" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>MWTask</name></member>
      <member refid="classMWDriver_1ae4eecd7ae0073b68372d079e78c210ca" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>next_ckpt_time</name></member>
      <member refid="classMWDriver_1a7a2469cbfbf5441069be4607419cfb77" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>next_worker_timeout_check</name></member>
      <member refid="classMWDriver_1a7d98da7c9981a4edbeb9427b3bd029cd" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>normal_tasks_all_done</name></member>
      <member refid="classMWDriver_1a25963400a7262bc2d75706b4bf96c453" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>num_completed_tasks</name></member>
      <member refid="classMWDriver_1aa3a1e82a5a6cb3cd9a7d3103f0d2f00e" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>NUM_IN_MEM_HI</name></member>
      <member refid="classMWDriver_1a8b7f11eb5034f28a30e51889e0a005b9" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>NUM_IN_MEM_LO</name></member>
      <member refid="classMWDriver_1ae1a927f51c31e6f31998965770b06c31" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>numberworker</name></member>
      <member refid="classMWDriver_1ada183d37afd5f06bf96c3f716ca90075" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>numWorkers</name></member>
      <member refid="classMWDriver_1a4930b0cd40ef0940732ba0b5057c7f15" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>numWorkers</name></member>
      <member refid="classMWDriver_1a1b0cd5e8c9a5e7561886fb1b7a48a7d1" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>numWorkersInState</name></member>
      <member refid="classMWDriver_1aac856cee1cb23d4c045b47b5f58509ff" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>outstanding_spawn</name></member>
      <member refid="classMWDriver_1af6856e6de5bd17575e809e8e24140844" prot="protected" virt="virtual"><scope>MWDriver</scope><name>pack_driver_task_data</name></member>
      <member refid="classMWDriver_1a8ac25d9fc7e9505bc14490d317c7560d" prot="public" virt="virtual"><scope>MWDriver</scope><name>pack_update</name></member>
      <member refid="classMWDriver_1a6a142fda8b58806b1769558afd17c85c" prot="protected" virt="pure-virtual"><scope>MWDriver</scope><name>pack_worker_init_data</name></member>
      <member refid="classMWDriver_1afc9ed3676db0cc2ac5f5941beb15f1da" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>prepare_update</name></member>
      <member refid="classMWDriver_1a8d2aea2804ff2f999ea206a3ee0f096a" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>print_task_keys</name></member>
      <member refid="classMWDriver_1a147074c64c2bf0883077a28432816947" prot="public" virt="virtual"><scope>MWDriver</scope><name>printresults</name></member>
      <member refid="classMWDriver_1a0b5211c316ce5b4c9d25614feaa1018e" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>printRunQ</name></member>
      <member refid="classMWDriver_1a7cd3d2d9ba6a9e0e89511b6114a18632" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>printWorkers</name></member>
      <member refid="classMWDriver_1aaf7f2b1c02f77e5886f91e24044bb027" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>pushTask</name></member>
      <member refid="classMWDriver_1aeef0b37492a7c540511ef274c7624f7f" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>putOnRunQ</name></member>
      <member refid="classMWDriver_1ade316a0388ef55bf25048ed484b66a05" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>read_file_task</name></member>
      <member refid="classMWDriver_1ab575d8dec66c8edadc165ebc6ea4e5a9" prot="public" virt="virtual"><scope>MWDriver</scope><name>read_master_state</name></member>
      <member refid="classMWDriver_1a394381ef1a29bd1300184793e0e8c5da" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>read_mem_task</name></member>
      <member refid="classMWDriver_1a0f8d0afccf1d735924504d62c4b6b018" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>reassign_tasks_timedout_workers</name></member>
      <member refid="classMWDriver_1aaa15a586a025baec75b96e8c5d2bc1c7" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>reassigned_tasks</name></member>
      <member refid="classMWDriver_1acef4435ca5f3846293628ef02999775f" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>reassigned_tasks_done</name></member>
      <member refid="classMWDriver_1a667ad4ad0017cd362835e7a89b43f061" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>reassignIdleTask</name></member>
      <member refid="classMWDriver_1aca4f177690775ecc72820c67a88e66f7" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>reassignSuspendedTask</name></member>
      <member refid="classMWDriver_1a9dc5f80c5069e9bddcfee2ad9e5e32e4" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>refreshWorkers</name></member>
      <member refid="classMWDriver_1ad0a6b24ff90e2d2ae1495062fb480f24" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>register_benchmark_task</name></member>
      <member refid="classMWDriver_1a5cdae273f688d42c363c0865f42cc645" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>rematch_tasks_to_workers</name></member>
      <member refid="classMWDriver_1af6a5b937b85d5a6cb90961249006942c" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>restart_from_ckpt</name></member>
      <member refid="classMWDriver_1a0579cc034d3c83ea68ab456d222b8b79" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>return_best_running_keyval</name></member>
      <member refid="classMWDriver_1add3bc92ab03d051502e69ca03de4928f" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>return_best_todo_keyval</name></member>
      <member refid="classMWDriver_1a3063439d04c8048868d6c4d5c51c6778" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>RMC</name></member>
      <member refid="classMWDriver_1ad201c101b05e8d1eb6a6a15e8da2b717" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>rmFromRunQ</name></member>
      <member refid="classMWDriver_1ab96e1b3efbc2fbbcf82129d4d0f6b6b4" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>rmWorker</name></member>
      <member refid="classMWDriver_1afc2283ab29203cbbbcfae8e8b1230860" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>running</name></member>
      <member refid="classMWDriver_1aa3a3b5690857370cdec07ea91d98639a" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>send_task_to_worker</name></member>
      <member refid="classMWDriver_1a3a101f4b453675e7408ad9f3869a9804" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>send_update_message</name></member>
      <member refid="classMWDriver_1ae13919ea92ecde1abc954db7ad0935d2" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>send_update_message_to</name></member>
      <member refid="classMWDriver_1aa34fc54dfba3806db87c297c8b39244a" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>set_checkpoint_frequency</name></member>
      <member refid="classMWDriver_1a7f803ede53bb0d797bce81d56a33cdf9" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>set_checkpoint_time</name></member>
      <member refid="classMWDriver_1a390d85849e7f510369c3b81ec4312de7" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>set_machine_ordering_policy</name></member>
      <member refid="classMWDriver_1a97b4b046a3793d45e28bd1b2fddbd8c1" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>set_suspension_policy</name></member>
      <member refid="classMWDriver_1ae31fcd35f6e798994a2419db39f9f743" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>set_task_add_mode</name></member>
      <member refid="classMWDriver_1abe90c9016afecc9bf9b68d4b9f3ba3b7" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>set_task_key_function</name></member>
      <member refid="classMWDriver_1a5d413e43dbd55fdc211f0aebdd51ac47" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>set_task_retrieve_mode</name></member>
      <member refid="classMWDriver_1ad41f96ba14ccc7712be09c0374eae9c9" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>set_worker_timeout_limit</name></member>
      <member refid="classMWDriver_1a618bdbf6e481a903455e068ba37ba0fa" prot="protected" virt="pure-virtual"><scope>MWDriver</scope><name>setup_initial_tasks</name></member>
      <member refid="classMWDriver_1a69e6f72bc04a6c68046a41bc4292bf64" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>sort_task_list</name></member>
      <member refid="classMWDriver_1a7be3d5224b22111a8278a26f3b0a6fa8" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>sort_worker_list</name></member>
      <member refid="classMWDriver_1acadeb08c412966919ab0627fda6aecb0" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>stats</name></member>
      <member refid="classMWDriver_1a62ee843c55a50415b8c96c552267bd48" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>stop_work</name></member>
      <member refid="classMWDriver_1adeac426d58dbd02b839bdb076d55e511" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>suspensionPolicy</name></member>
      <member refid="classMWDriver_1aaa70ab2dd6087ef2415824f770747f8f" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>swap_in_todo_tasks</name></member>
      <member refid="classMWDriver_1afa05516157b292a420ba6770fd2f493c" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>swap_out_todo_tasks</name></member>
      <member refid="classMWDriver_1a2e1bafeb1ae28f682451ed256a8e8d41" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>task_assigned</name></member>
      <member refid="classMWDriver_1afb21eace76d7b787027122f94c435e85" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>task_counter</name></member>
      <member refid="classMWDriver_1a28bffbc9d533d4c33f60b0dbc1c77133" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>task_in_todo_list</name></member>
      <member refid="classMWDriver_1a1d359e2a84216713f63d93ff343c68b2" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>task_key</name></member>
      <member refid="classMWDriver_1a25db54a2f87d2b29d4c701de16dc9465" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>todo</name></member>
      <member refid="classMWDriver_1aaddea2ee086b0683b5d80ecb0438df91" prot="protected" virt="virtual"><scope>MWDriver</scope><name>unpack_worker_initinfo</name></member>
      <member refid="classMWDriver_1af239d1566ec6f0657891a027399d1217" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>workClasses_get</name></member>
      <member refid="classMWDriver_1a0cbd67b86b21fa4676884107bdd48fce" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>workClasses_gettasks</name></member>
      <member refid="classMWDriver_1a31d60231d425b490ebca37dae8ffd47a" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>workClasses_getworkers</name></member>
      <member refid="classMWDriver_1a49177e47b2d394aff1bc952e98bb7e19" prot="protected" virt="non-virtual"><scope>MWDriver</scope><name>workClasses_set</name></member>
      <member refid="classMWDriver_1af9e63e7278bac6df108015ff56465e53" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>worker_init</name></member>
      <member refid="classMWDriver_1a510a0371be6a0229f62d39639830baa7" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>worker_key</name></member>
      <member refid="classMWDriver_1ac0c7ed309547cf1bf166603bc07787ac" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>worker_last_rites</name></member>
      <member refid="classMWDriver_1a2be6943d88a7eeb539a53d6744aef75c" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>worker_timeout</name></member>
      <member refid="classMWDriver_1a2c1cf2f62fee7c45c974de15fd089374" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>worker_timeout_check_frequency</name></member>
      <member refid="classMWDriver_1afb3ff7e494a9ff6f31318016c8659c06" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>worker_timeout_limit</name></member>
      <member refid="classMWDriver_1a293af433f8634444caaac0d94f66c401" prot="private" virt="non-virtual"><scope>MWDriver</scope><name>workers</name></member>
      <member refid="classMWDriver_1ab3a42409894c40f6992f01b433174588" prot="public" virt="virtual"><scope>MWDriver</scope><name>write_master_state</name></member>
      <member refid="classMWDriver_1a9791a018c5711fd6590af5f29d49877f" prot="public" virt="non-virtual"><scope>MWDriver</scope><name>write_task</name></member>
      <member refid="classMWDriver_1a05b1dac7d50ff571c480ff386e6fcb30" prot="public" virt="virtual"><scope>MWDriver</scope><name>~MWDriver</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
